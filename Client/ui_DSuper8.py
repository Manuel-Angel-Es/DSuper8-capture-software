# Form implementation generated from reading ui file '/home/mao/Proyectos/PyQt6/DSuper8-20230430-en/Client/DSuper8.ui'
#
# Created by: PyQt6 UI code generator 6.5.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_DSuper8(object):
    def setupUi(self, DSuper8):
        DSuper8.setObjectName("DSuper8")
        DSuper8.resize(400, 810)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(DSuper8.sizePolicy().hasHeightForWidth())
        DSuper8.setSizePolicy(sizePolicy)
        DSuper8.setMinimumSize(QtCore.QSize(400, 810))
        DSuper8.setMaximumSize(QtCore.QSize(400, 810))
        DSuper8.setWindowTitle("DSuper8")
        DSuper8.setToolTip("")
        self.verticalLayout_18 = QtWidgets.QVBoxLayout(DSuper8)
        self.verticalLayout_18.setObjectName("verticalLayout_18")
        self.DS8tabWidget = QtWidgets.QTabWidget(parent=DSuper8)
        self.DS8tabWidget.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DS8tabWidget.sizePolicy().hasHeightForWidth())
        self.DS8tabWidget.setSizePolicy(sizePolicy)
        self.DS8tabWidget.setMinimumSize(QtCore.QSize(384, 410))
        self.DS8tabWidget.setMaximumSize(QtCore.QSize(384, 410))
        self.DS8tabWidget.setToolTip("")
        self.DS8tabWidget.setStatusTip("")
        self.DS8tabWidget.setWhatsThis("")
        self.DS8tabWidget.setAccessibleName("")
        self.DS8tabWidget.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.DS8tabWidget.setTabShape(QtWidgets.QTabWidget.TabShape.Rounded)
        self.DS8tabWidget.setObjectName("DS8tabWidget")
        self.tab_setup = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tab_setup.sizePolicy().hasHeightForWidth())
        self.tab_setup.setSizePolicy(sizePolicy)
        self.tab_setup.setToolTip("")
        self.tab_setup.setObjectName("tab_setup")
        self.verticalLayout_6 = QtWidgets.QVBoxLayout(self.tab_setup)
        self.verticalLayout_6.setObjectName("verticalLayout_6")
        spacerItem = QtWidgets.QSpacerItem(20, 15, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_6.addItem(spacerItem)
        self.groupBox_1 = QtWidgets.QGroupBox(parent=self.tab_setup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_1.sizePolicy().hasHeightForWidth())
        self.groupBox_1.setSizePolicy(sizePolicy)
        self.groupBox_1.setMinimumSize(QtCore.QSize(364, 160))
        self.groupBox_1.setMaximumSize(QtCore.QSize(364, 160))
        self.groupBox_1.setToolTip("")
        self.groupBox_1.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.groupBox_1.setTitle("Initial settings")
        self.groupBox_1.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_1.setObjectName("groupBox_1")
        self.horizontalLayout_50 = QtWidgets.QHBoxLayout(self.groupBox_1)
        self.horizontalLayout_50.setObjectName("horizontalLayout_50")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.zoomDial = QtWidgets.QDial(parent=self.groupBox_1)
        self.zoomDial.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.zoomDial.sizePolicy().hasHeightForWidth())
        self.zoomDial.setSizePolicy(sizePolicy)
        self.zoomDial.setMinimumSize(QtCore.QSize(100, 100))
        self.zoomDial.setMaximumSize(QtCore.QSize(100, 100))
        self.zoomDial.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.zoomDial.setToolTip("Set zoom level.\n"
"The central zone\n"
"from image is\n"
"increased.")
        self.zoomDial.setStatusTip("")
        self.zoomDial.setWhatsThis("")
        self.zoomDial.setAccessibleName("")
        self.zoomDial.setAccessibleDescription("")
        self.zoomDial.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.zoomDial.setMinimum(400)
        self.zoomDial.setMaximum(1000)
        self.zoomDial.setProperty("value", 1000)
        self.zoomDial.setNotchTarget(25.0)
        self.zoomDial.setNotchesVisible(True)
        self.zoomDial.setObjectName("zoomDial")
        self.verticalLayout_2.addWidget(self.zoomDial)
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_6 = QtWidgets.QLabel(parent=self.groupBox_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_6.sizePolicy().hasHeightForWidth())
        self.label_6.setSizePolicy(sizePolicy)
        self.label_6.setMinimumSize(QtCore.QSize(20, 12))
        self.label_6.setMaximumSize(QtCore.QSize(20, 12))
        self.label_6.setText("0,4")
        self.label_6.setObjectName("label_6")
        self.horizontalLayout.addWidget(self.label_6)
        spacerItem1 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout.addItem(spacerItem1)
        self.label_7 = QtWidgets.QLabel(parent=self.groupBox_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_7.sizePolicy().hasHeightForWidth())
        self.label_7.setSizePolicy(sizePolicy)
        self.label_7.setMinimumSize(QtCore.QSize(20, 12))
        self.label_7.setMaximumSize(QtCore.QSize(20, 12))
        self.label_7.setText("1")
        self.label_7.setObjectName("label_7")
        self.horizontalLayout.addWidget(self.label_7)
        self.verticalLayout_2.addLayout(self.horizontalLayout)
        self.horizontalLayout_50.addLayout(self.verticalLayout_2)
        self.verticalLayout_23 = QtWidgets.QVBoxLayout()
        self.verticalLayout_23.setObjectName("verticalLayout_23")
        self.horizontalLayout_48 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_48.setSizeConstraint(QtWidgets.QLayout.SizeConstraint.SetMinimumSize)
        self.horizontalLayout_48.setObjectName("horizontalLayout_48")
        self.verticalLayout_24 = QtWidgets.QVBoxLayout()
        self.verticalLayout_24.setObjectName("verticalLayout_24")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem2)
        self.roiUpButton = QtWidgets.QToolButton(parent=self.groupBox_1)
        self.roiUpButton.setEnabled(False)
        self.roiUpButton.setMinimumSize(QtCore.QSize(20, 20))
        self.roiUpButton.setMaximumSize(QtCore.QSize(20, 20))
        self.roiUpButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.roiUpButton.setToolTip("Move region of interest\n"
"upwards.")
        self.roiUpButton.setStatusTip("")
        self.roiUpButton.setWhatsThis("")
        self.roiUpButton.setAccessibleName("")
        self.roiUpButton.setAccessibleDescription("")
        self.roiUpButton.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.roiUpButton.setText("...")
        self.roiUpButton.setAutoRepeat(True)
        self.roiUpButton.setArrowType(QtCore.Qt.ArrowType.UpArrow)
        self.roiUpButton.setObjectName("roiUpButton")
        self.horizontalLayout_4.addWidget(self.roiUpButton)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_4.addItem(spacerItem3)
        self.verticalLayout_24.addLayout(self.horizontalLayout_4)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.roiLeftButton = QtWidgets.QToolButton(parent=self.groupBox_1)
        self.roiLeftButton.setEnabled(False)
        self.roiLeftButton.setMinimumSize(QtCore.QSize(20, 20))
        self.roiLeftButton.setMaximumSize(QtCore.QSize(20, 20))
        self.roiLeftButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.roiLeftButton.setToolTip("Move region of interest\n"
"toward the left.")
        self.roiLeftButton.setStatusTip("")
        self.roiLeftButton.setWhatsThis("")
        self.roiLeftButton.setAccessibleName("")
        self.roiLeftButton.setAccessibleDescription("")
        self.roiLeftButton.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.roiLeftButton.setText("...")
        self.roiLeftButton.setAutoRepeat(True)
        self.roiLeftButton.setArrowType(QtCore.Qt.ArrowType.LeftArrow)
        self.roiLeftButton.setObjectName("roiLeftButton")
        self.horizontalLayout_3.addWidget(self.roiLeftButton)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem5)
        self.roiRightButton = QtWidgets.QToolButton(parent=self.groupBox_1)
        self.roiRightButton.setEnabled(False)
        self.roiRightButton.setMinimumSize(QtCore.QSize(20, 20))
        self.roiRightButton.setMaximumSize(QtCore.QSize(20, 20))
        self.roiRightButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.roiRightButton.setToolTip("Move region of interest\n"
"toward the right.")
        self.roiRightButton.setStatusTip("")
        self.roiRightButton.setWhatsThis("")
        self.roiRightButton.setAccessibleName("")
        self.roiRightButton.setAccessibleDescription("")
        self.roiRightButton.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.roiRightButton.setText("...")
        self.roiRightButton.setAutoRepeat(True)
        self.roiRightButton.setArrowType(QtCore.Qt.ArrowType.RightArrow)
        self.roiRightButton.setObjectName("roiRightButton")
        self.horizontalLayout_3.addWidget(self.roiRightButton)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem6)
        self.verticalLayout_24.addLayout(self.horizontalLayout_3)
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem7)
        self.roiDownButton = QtWidgets.QToolButton(parent=self.groupBox_1)
        self.roiDownButton.setEnabled(False)
        self.roiDownButton.setMinimumSize(QtCore.QSize(20, 20))
        self.roiDownButton.setMaximumSize(QtCore.QSize(20, 20))
        self.roiDownButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.roiDownButton.setToolTip("Move region of interest\n"
"down.")
        self.roiDownButton.setStatusTip("")
        self.roiDownButton.setWhatsThis("")
        self.roiDownButton.setAccessibleName("")
        self.roiDownButton.setAccessibleDescription("")
        self.roiDownButton.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.roiDownButton.setText("...")
        self.roiDownButton.setAutoRepeat(True)
        self.roiDownButton.setArrowType(QtCore.Qt.ArrowType.DownArrow)
        self.roiDownButton.setObjectName("roiDownButton")
        self.horizontalLayout_9.addWidget(self.roiDownButton)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_9.addItem(spacerItem8)
        self.verticalLayout_24.addLayout(self.horizontalLayout_9)
        self.horizontalLayout_48.addLayout(self.verticalLayout_24)
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.lightCheckbox = QtWidgets.QCheckBox(parent=self.groupBox_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lightCheckbox.sizePolicy().hasHeightForWidth())
        self.lightCheckbox.setSizePolicy(sizePolicy)
        self.lightCheckbox.setMinimumSize(QtCore.QSize(104, 18))
        self.lightCheckbox.setMaximumSize(QtCore.QSize(104, 18))
        self.lightCheckbox.setFocusPolicy(QtCore.Qt.FocusPolicy.TabFocus)
        self.lightCheckbox.setToolTip("Lighting On/Off")
        self.lightCheckbox.setStatusTip("")
        self.lightCheckbox.setWhatsThis("")
        self.lightCheckbox.setAccessibleName("")
        self.lightCheckbox.setAccessibleDescription("")
        self.lightCheckbox.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.lightCheckbox.setText("Light")
        self.lightCheckbox.setObjectName("lightCheckbox")
        self.verticalLayout.addWidget(self.lightCheckbox)
        self.prevCheckBox = QtWidgets.QCheckBox(parent=self.groupBox_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.prevCheckBox.sizePolicy().hasHeightForWidth())
        self.prevCheckBox.setSizePolicy(sizePolicy)
        self.prevCheckBox.setMinimumSize(QtCore.QSize(104, 18))
        self.prevCheckBox.setMaximumSize(QtCore.QSize(104, 18))
        self.prevCheckBox.setToolTip("Enable/Disable display\n"
"of preview images.")
        self.prevCheckBox.setStatusTip("")
        self.prevCheckBox.setWhatsThis("")
        self.prevCheckBox.setAccessibleName("")
        self.prevCheckBox.setAccessibleDescription("")
        self.prevCheckBox.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.prevCheckBox.setText("Preview")
        self.prevCheckBox.setObjectName("prevCheckBox")
        self.verticalLayout.addWidget(self.prevCheckBox)
        self.startPosCheckBox = QtWidgets.QCheckBox(parent=self.groupBox_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.startPosCheckBox.sizePolicy().hasHeightForWidth())
        self.startPosCheckBox.setSizePolicy(sizePolicy)
        self.startPosCheckBox.setMinimumSize(QtCore.QSize(104, 18))
        self.startPosCheckBox.setMaximumSize(QtCore.QSize(104, 18))
        self.startPosCheckBox.setToolTip("Check when the movie is\n"
"find in position initial, frame 1.\n"
"Once checked, the indicator\n"
"position will be updated with\n"
"the motion of the film.")
        self.startPosCheckBox.setStatusTip("")
        self.startPosCheckBox.setWhatsThis("")
        self.startPosCheckBox.setAccessibleName("")
        self.startPosCheckBox.setAccessibleDescription("")
        self.startPosCheckBox.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.startPosCheckBox.setText("In position")
        self.startPosCheckBox.setObjectName("startPosCheckBox")
        self.verticalLayout.addWidget(self.startPosCheckBox)
        self.horizontalLayout_48.addLayout(self.verticalLayout)
        self.verticalLayout_23.addLayout(self.horizontalLayout_48)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.fRevButton = QtWidgets.QPushButton(parent=self.groupBox_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fRevButton.sizePolicy().hasHeightForWidth())
        self.fRevButton.setSizePolicy(sizePolicy)
        self.fRevButton.setMinimumSize(QtCore.QSize(40, 30))
        self.fRevButton.setMaximumSize(QtCore.QSize(40, 30))
        self.fRevButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.fRevButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.fRevButton.setToolTip("Frames in continuous reverse.")
        self.fRevButton.setStatusTip("")
        self.fRevButton.setWhatsThis("")
        self.fRevButton.setAccessibleName("")
        self.fRevButton.setAccessibleDescription("")
        self.fRevButton.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.fRevButton.setText("<<")
        self.fRevButton.setObjectName("fRevButton")
        self.horizontalLayout_2.addWidget(self.fRevButton)
        self.reverseButton = QtWidgets.QPushButton(parent=self.groupBox_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.reverseButton.sizePolicy().hasHeightForWidth())
        self.reverseButton.setSizePolicy(sizePolicy)
        self.reverseButton.setMinimumSize(QtCore.QSize(40, 30))
        self.reverseButton.setMaximumSize(QtCore.QSize(40, 30))
        self.reverseButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.reverseButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.reverseButton.setToolTip("Go back one frame.")
        self.reverseButton.setStatusTip("")
        self.reverseButton.setWhatsThis("")
        self.reverseButton.setAccessibleName("")
        self.reverseButton.setAccessibleDescription("")
        self.reverseButton.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.reverseButton.setText("<-")
        self.reverseButton.setObjectName("reverseButton")
        self.horizontalLayout_2.addWidget(self.reverseButton)
        self.stopButton = QtWidgets.QPushButton(parent=self.groupBox_1)
        self.stopButton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stopButton.sizePolicy().hasHeightForWidth())
        self.stopButton.setSizePolicy(sizePolicy)
        self.stopButton.setMinimumSize(QtCore.QSize(50, 30))
        self.stopButton.setMaximumSize(QtCore.QSize(50, 30))
        self.stopButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.stopButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.stopButton.setToolTip("Stop continuous movement.")
        self.stopButton.setStatusTip("")
        self.stopButton.setWhatsThis("")
        self.stopButton.setAccessibleName("")
        self.stopButton.setAccessibleDescription("")
        self.stopButton.setLocale(QtCore.QLocale(QtCore.QLocale.Language.Divehi, QtCore.QLocale.Country.Maldives))
        self.stopButton.setText("Stop")
        self.stopButton.setObjectName("stopButton")
        self.horizontalLayout_2.addWidget(self.stopButton)
        self.forwardButton = QtWidgets.QPushButton(parent=self.groupBox_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.forwardButton.sizePolicy().hasHeightForWidth())
        self.forwardButton.setSizePolicy(sizePolicy)
        self.forwardButton.setMinimumSize(QtCore.QSize(40, 30))
        self.forwardButton.setMaximumSize(QtCore.QSize(40, 30))
        self.forwardButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.forwardButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.forwardButton.setToolTip("Advance one frame.")
        self.forwardButton.setStatusTip("")
        self.forwardButton.setWhatsThis("")
        self.forwardButton.setAccessibleName("")
        self.forwardButton.setAccessibleDescription("")
        self.forwardButton.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.forwardButton.setText("->")
        self.forwardButton.setObjectName("forwardButton")
        self.horizontalLayout_2.addWidget(self.forwardButton)
        self.ffdButton = QtWidgets.QPushButton(parent=self.groupBox_1)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ffdButton.sizePolicy().hasHeightForWidth())
        self.ffdButton.setSizePolicy(sizePolicy)
        self.ffdButton.setMinimumSize(QtCore.QSize(40, 30))
        self.ffdButton.setMaximumSize(QtCore.QSize(40, 30))
        self.ffdButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.ffdButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.ffdButton.setToolTip("Frames in continuous advance.")
        self.ffdButton.setStatusTip("")
        self.ffdButton.setWhatsThis("")
        self.ffdButton.setAccessibleName("")
        self.ffdButton.setAccessibleDescription("")
        self.ffdButton.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.ffdButton.setText(">>")
        self.ffdButton.setObjectName("ffdButton")
        self.horizontalLayout_2.addWidget(self.ffdButton)
        self.verticalLayout_23.addLayout(self.horizontalLayout_2)
        self.horizontalLayout_50.addLayout(self.verticalLayout_23)
        self.verticalLayout_6.addWidget(self.groupBox_1)
        spacerItem9 = QtWidgets.QSpacerItem(20, 15, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_6.addItem(spacerItem9)
        self.groupBox = QtWidgets.QGroupBox(parent=self.tab_setup)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        self.groupBox.setMinimumSize(QtCore.QSize(364, 124))
        self.groupBox.setMaximumSize(QtCore.QSize(364, 124))
        self.groupBox.setToolTip("Show the configuration file\n"
"loaded in the user interface.")
        self.groupBox.setStatusTip("")
        self.groupBox.setWhatsThis("")
        self.groupBox.setAccessibleName("")
        self.groupBox.setAccessibleDescription("")
        self.groupBox.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.groupBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout_3 = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout_3.setObjectName("verticalLayout_3")
        self.configFileBox = QtWidgets.QLineEdit(parent=self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.configFileBox.sizePolicy().hasHeightForWidth())
        self.configFileBox.setSizePolicy(sizePolicy)
        self.configFileBox.setMinimumSize(QtCore.QSize(348, 30))
        self.configFileBox.setMaximumSize(QtCore.QSize(348, 30))
        self.configFileBox.setToolTip("Show the configuration file\n"
"loaded in the user interface.")
        self.configFileBox.setStatusTip("")
        self.configFileBox.setWhatsThis("")
        self.configFileBox.setAccessibleName("")
        self.configFileBox.setAccessibleDescription("")
        self.configFileBox.setObjectName("configFileBox")
        self.verticalLayout_3.addWidget(self.configFileBox)
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.loadConfigButton = QtWidgets.QPushButton(parent=self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.loadConfigButton.sizePolicy().hasHeightForWidth())
        self.loadConfigButton.setSizePolicy(sizePolicy)
        self.loadConfigButton.setMinimumSize(QtCore.QSize(112, 30))
        self.loadConfigButton.setMaximumSize(QtCore.QSize(112, 30))
        self.loadConfigButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.loadConfigButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.loadConfigButton.setToolTip("Select configuration file to use.")
        self.loadConfigButton.setStatusTip("")
        self.loadConfigButton.setWhatsThis("")
        self.loadConfigButton.setAccessibleName("")
        self.loadConfigButton.setAccessibleDescription("")
        self.loadConfigButton.setText("Load...")
        self.loadConfigButton.setObjectName("loadConfigButton")
        self.horizontalLayout_5.addWidget(self.loadConfigButton)
        spacerItem10 = QtWidgets.QSpacerItem(6, 30, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem10)
        self.saveConfigButton = QtWidgets.QPushButton(parent=self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.saveConfigButton.sizePolicy().hasHeightForWidth())
        self.saveConfigButton.setSizePolicy(sizePolicy)
        self.saveConfigButton.setMinimumSize(QtCore.QSize(112, 30))
        self.saveConfigButton.setMaximumSize(QtCore.QSize(112, 30))
        self.saveConfigButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.saveConfigButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.saveConfigButton.setToolTip("Save current settings to\n"
"previously selected file.")
        self.saveConfigButton.setStatusTip("")
        self.saveConfigButton.setWhatsThis("")
        self.saveConfigButton.setAccessibleName("")
        self.saveConfigButton.setAccessibleDescription("")
        self.saveConfigButton.setText("Save")
        self.saveConfigButton.setObjectName("saveConfigButton")
        self.horizontalLayout_5.addWidget(self.saveConfigButton)
        spacerItem11 = QtWidgets.QSpacerItem(6, 30, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem11)
        self.saveAsButton = QtWidgets.QPushButton(parent=self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.saveAsButton.sizePolicy().hasHeightForWidth())
        self.saveAsButton.setSizePolicy(sizePolicy)
        self.saveAsButton.setMinimumSize(QtCore.QSize(112, 30))
        self.saveAsButton.setMaximumSize(QtCore.QSize(112, 30))
        self.saveAsButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.saveAsButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.saveAsButton.setToolTip("Save current settings in new file.")
        self.saveAsButton.setStatusTip("")
        self.saveAsButton.setWhatsThis("")
        self.saveAsButton.setAccessibleName("")
        self.saveAsButton.setAccessibleDescription("")
        self.saveAsButton.setText("Save as...")
        self.saveAsButton.setObjectName("saveAsButton")
        self.horizontalLayout_5.addWidget(self.saveAsButton)
        self.verticalLayout_3.addLayout(self.horizontalLayout_5)
        self.verticalLayout_6.addWidget(self.groupBox)
        spacerItem12 = QtWidgets.QSpacerItem(20, 15, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_6.addItem(spacerItem12)
        self.DS8tabWidget.addTab(self.tab_setup, "Setup")
        self.DS8tabWidget.setTabToolTip(self.DS8tabWidget.indexOf(self.tab_setup), "Initial settings:\n"
"- Preview frames.\n"
"- Zoom adjustment.\n"
"- Position the film in\n"
"   the first frame.\n"
"- Load/Save\n"
"  configuration file.")
        self.tab_cap = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tab_cap.sizePolicy().hasHeightForWidth())
        self.tab_cap.setSizePolicy(sizePolicy)
        self.tab_cap.setToolTip("")
        self.tab_cap.setObjectName("tab_cap")
        self.verticalLayout_34 = QtWidgets.QVBoxLayout(self.tab_cap)
        self.verticalLayout_34.setObjectName("verticalLayout_34")
        self.horizontalLayout_31 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_31.setObjectName("horizontalLayout_31")
        self.verticalLayout_7 = QtWidgets.QVBoxLayout()
        self.verticalLayout_7.setObjectName("verticalLayout_7")
        self.horizontalLayout_17 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_17.setObjectName("horizontalLayout_17")
        spacerItem13 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_17.addItem(spacerItem13)
        self.endFrameLabel = QtWidgets.QLabel(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.endFrameLabel.sizePolicy().hasHeightForWidth())
        self.endFrameLabel.setSizePolicy(sizePolicy)
        self.endFrameLabel.setMinimumSize(QtCore.QSize(70, 30))
        self.endFrameLabel.setMaximumSize(QtCore.QSize(70, 30))
        self.endFrameLabel.setToolTip("Last frame planned to digitize.")
        self.endFrameLabel.setStatusTip("")
        self.endFrameLabel.setWhatsThis("")
        self.endFrameLabel.setAccessibleName("")
        self.endFrameLabel.setAccessibleDescription("")
        self.endFrameLabel.setText("Last frame")
        self.endFrameLabel.setObjectName("endFrameLabel")
        self.horizontalLayout_17.addWidget(self.endFrameLabel)
        self.endFrameBox = QtWidgets.QSpinBox(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.endFrameBox.sizePolicy().hasHeightForWidth())
        self.endFrameBox.setSizePolicy(sizePolicy)
        self.endFrameBox.setMinimumSize(QtCore.QSize(70, 30))
        self.endFrameBox.setMaximumSize(QtCore.QSize(70, 30))
        self.endFrameBox.setToolTip("Last frame planned to digitize.")
        self.endFrameBox.setStatusTip("")
        self.endFrameBox.setWhatsThis("")
        self.endFrameBox.setAccessibleName("")
        self.endFrameBox.setAccessibleDescription("")
        self.endFrameBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.endFrameBox.setMaximum(99999)
        self.endFrameBox.setSingleStep(1)
        self.endFrameBox.setProperty("value", 0)
        self.endFrameBox.setObjectName("endFrameBox")
        self.horizontalLayout_17.addWidget(self.endFrameBox)
        self.verticalLayout_7.addLayout(self.horizontalLayout_17)
        self.horizontalLayout_18 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_18.setObjectName("horizontalLayout_18")
        self.captureTestBtn = QtWidgets.QPushButton(parent=self.tab_cap)
        self.captureTestBtn.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.captureTestBtn.sizePolicy().hasHeightForWidth())
        self.captureTestBtn.setSizePolicy(sizePolicy)
        self.captureTestBtn.setMinimumSize(QtCore.QSize(60, 30))
        self.captureTestBtn.setMaximumSize(QtCore.QSize(60, 30))
        self.captureTestBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.captureTestBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.captureTestBtn.setToolTip("Take test photo with settings\n"
"made for capture.")
        self.captureTestBtn.setStatusTip("")
        self.captureTestBtn.setWhatsThis("")
        self.captureTestBtn.setAccessibleName("")
        self.captureTestBtn.setAccessibleDescription("")
        self.captureTestBtn.setLayoutDirection(QtCore.Qt.LayoutDirection.LeftToRight)
        self.captureTestBtn.setText("Test")
        self.captureTestBtn.setObjectName("captureTestBtn")
        self.horizontalLayout_18.addWidget(self.captureTestBtn)
        self.saveAllCheckBox = QtWidgets.QCheckBox(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.saveAllCheckBox.sizePolicy().hasHeightForWidth())
        self.saveAllCheckBox.setSizePolicy(sizePolicy)
        self.saveAllCheckBox.setMinimumSize(QtCore.QSize(114, 30))
        self.saveAllCheckBox.setMaximumSize(QtCore.QSize(114, 30))
        self.saveAllCheckBox.setToolTip("Save all backeting images\n"
"generated for get an HDR\n"
"image.\n"
"Saved files have the same\n"
"name as the file HDR plus\n"
"a numeric suffix with the\n"
"shot order number.\n"
"The exposure time is saved\n"
"in the EXIF information of\n"
"the file.")
        self.saveAllCheckBox.setStatusTip("")
        self.saveAllCheckBox.setWhatsThis("")
        self.saveAllCheckBox.setAccessibleName("")
        self.saveAllCheckBox.setAccessibleDescription("")
        self.saveAllCheckBox.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.saveAllCheckBox.setText("Save all images")
        self.saveAllCheckBox.setObjectName("saveAllCheckBox")
        self.horizontalLayout_18.addWidget(self.saveAllCheckBox)
        self.verticalLayout_7.addLayout(self.horizontalLayout_18)
        self.horizontalLayout_31.addLayout(self.verticalLayout_7)
        spacerItem14 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_31.addItem(spacerItem14)
        self.verticalLayout_8 = QtWidgets.QVBoxLayout()
        self.verticalLayout_8.setObjectName("verticalLayout_8")
        self.horizontalLayout_28 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_28.setObjectName("horizontalLayout_28")
        self.bracketingBox = QtWidgets.QSpinBox(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bracketingBox.sizePolicy().hasHeightForWidth())
        self.bracketingBox.setSizePolicy(sizePolicy)
        self.bracketingBox.setMinimumSize(QtCore.QSize(50, 30))
        self.bracketingBox.setMaximumSize(QtCore.QSize(50, 30))
        self.bracketingBox.setToolTip("Number of photos to take per frame\n"
"to make bracketing exposures, in order\n"
"to increase the dynamic range of the\n"
"images.")
        self.bracketingBox.setStatusTip("")
        self.bracketingBox.setWhatsThis("")
        self.bracketingBox.setAccessibleName("")
        self.bracketingBox.setAccessibleDescription("")
        self.bracketingBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.bracketingBox.setMinimum(1)
        self.bracketingBox.setMaximum(8)
        self.bracketingBox.setObjectName("bracketingBox")
        self.horizontalLayout_28.addWidget(self.bracketingBox)
        self.bracketingLabel = QtWidgets.QLabel(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bracketingLabel.sizePolicy().hasHeightForWidth())
        self.bracketingLabel.setSizePolicy(sizePolicy)
        self.bracketingLabel.setMinimumSize(QtCore.QSize(90, 30))
        self.bracketingLabel.setMaximumSize(QtCore.QSize(90, 30))
        self.bracketingLabel.setToolTip("Number of photos to take per frame\n"
"to make bracketing exposures, in order\n"
"to increase the dynamic range of the\n"
"images.")
        self.bracketingLabel.setStatusTip("")
        self.bracketingLabel.setWhatsThis("")
        self.bracketingLabel.setAccessibleName("")
        self.bracketingLabel.setAccessibleDescription("")
        self.bracketingLabel.setText("Photos/Frame")
        self.bracketingLabel.setObjectName("bracketingLabel")
        self.horizontalLayout_28.addWidget(self.bracketingLabel)
        spacerItem15 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_28.addItem(spacerItem15)
        self.verticalLayout_8.addLayout(self.horizontalLayout_28)
        self.horizontalLayout_16 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_16.setObjectName("horizontalLayout_16")
        self.stopsBox = QtWidgets.QDoubleSpinBox(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stopsBox.sizePolicy().hasHeightForWidth())
        self.stopsBox.setSizePolicy(sizePolicy)
        self.stopsBox.setMinimumSize(QtCore.QSize(50, 30))
        self.stopsBox.setMaximumSize(QtCore.QSize(50, 30))
        self.stopsBox.setToolTip("It is used for the calculation of bracketing\n"
"exposures.\n"
"It is the difference in the value between\n"
"the minimum and the maximum exposure\n"
"used in the photo.\n"
"Each stop increases/decreases the exposure\n"
"time by double/half.")
        self.stopsBox.setStatusTip("")
        self.stopsBox.setWhatsThis("")
        self.stopsBox.setAccessibleName("")
        self.stopsBox.setAccessibleDescription("")
        self.stopsBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.stopsBox.setDecimals(1)
        self.stopsBox.setMinimum(0.0)
        self.stopsBox.setMaximum(8.0)
        self.stopsBox.setSingleStep(0.5)
        self.stopsBox.setProperty("value", 0.0)
        self.stopsBox.setObjectName("stopsBox")
        self.horizontalLayout_16.addWidget(self.stopsBox)
        self.stopsLabel = QtWidgets.QLabel(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.stopsLabel.sizePolicy().hasHeightForWidth())
        self.stopsLabel.setSizePolicy(sizePolicy)
        self.stopsLabel.setMinimumSize(QtCore.QSize(90, 30))
        self.stopsLabel.setMaximumSize(QtCore.QSize(90, 30))
        self.stopsLabel.setToolTip("It is used for the calculation of bracketing\n"
"exposures.\n"
"It is the difference in the value between\n"
"the minimum and the maximum exposure\n"
"used in the photo.\n"
"Each stop increases/decreases the exposure\n"
"time by double/half.")
        self.stopsLabel.setStatusTip("")
        self.stopsLabel.setWhatsThis("")
        self.stopsLabel.setAccessibleName("")
        self.stopsLabel.setAccessibleDescription("")
        self.stopsLabel.setText("Stops")
        self.stopsLabel.setObjectName("stopsLabel")
        self.horizontalLayout_16.addWidget(self.stopsLabel)
        spacerItem16 = QtWidgets.QSpacerItem(10, 17, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_16.addItem(spacerItem16)
        self.verticalLayout_8.addLayout(self.horizontalLayout_16)
        self.horizontalLayout_31.addLayout(self.verticalLayout_8)
        self.verticalLayout_34.addLayout(self.horizontalLayout_31)
        self.horizontalLayout_27 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_27.setObjectName("horizontalLayout_27")
        spacerItem17 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_27.addItem(spacerItem17)
        self.autoExpCheckBox = QtWidgets.QCheckBox(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.autoExpCheckBox.sizePolicy().hasHeightForWidth())
        self.autoExpCheckBox.setSizePolicy(sizePolicy)
        self.autoExpCheckBox.setMinimumSize(QtCore.QSize(78, 30))
        self.autoExpCheckBox.setMaximumSize(QtCore.QSize(78, 30))
        self.autoExpCheckBox.setToolTip("Enable/Disable automatic\n"
"exposure adjustment.")
        self.autoExpCheckBox.setStatusTip("")
        self.autoExpCheckBox.setWhatsThis("")
        self.autoExpCheckBox.setAccessibleName("")
        self.autoExpCheckBox.setAccessibleDescription("")
        self.autoExpCheckBox.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.autoExpCheckBox.setText("Auto exp.")
        self.autoExpCheckBox.setChecked(False)
        self.autoExpCheckBox.setObjectName("autoExpCheckBox")
        self.horizontalLayout_27.addWidget(self.autoExpCheckBox)
        spacerItem18 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_27.addItem(spacerItem18)
        self.timeExpLabel = QtWidgets.QLabel(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.timeExpLabel.sizePolicy().hasHeightForWidth())
        self.timeExpLabel.setSizePolicy(sizePolicy)
        self.timeExpLabel.setMinimumSize(QtCore.QSize(45, 30))
        self.timeExpLabel.setMaximumSize(QtCore.QSize(45, 30))
        self.timeExpLabel.setToolTip("Manual setting of the exposure\n"
"time in ms.\n"
"In capture mode it shows the\n"
"exposure time of each photo\n"
"taken by the camera.")
        self.timeExpLabel.setStatusTip("")
        self.timeExpLabel.setWhatsThis("")
        self.timeExpLabel.setAccessibleName("")
        self.timeExpLabel.setAccessibleDescription("")
        self.timeExpLabel.setText("Manual")
        self.timeExpLabel.setObjectName("timeExpLabel")
        self.horizontalLayout_27.addWidget(self.timeExpLabel)
        self.timeExpBox = QtWidgets.QDoubleSpinBox(parent=self.tab_cap)
        self.timeExpBox.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.timeExpBox.sizePolicy().hasHeightForWidth())
        self.timeExpBox.setSizePolicy(sizePolicy)
        self.timeExpBox.setMinimumSize(QtCore.QSize(90, 30))
        self.timeExpBox.setMaximumSize(QtCore.QSize(90, 30))
        self.timeExpBox.setToolTip("Manual setting of the exposure\n"
"time in ms.\n"
"In capture mode it shows the\n"
"exposure time of each photo\n"
"taken by the camera.")
        self.timeExpBox.setStatusTip("")
        self.timeExpBox.setWhatsThis("")
        self.timeExpBox.setAccessibleName("")
        self.timeExpBox.setAccessibleDescription("")
        self.timeExpBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.timeExpBox.setSpecialValueText("")
        self.timeExpBox.setSuffix(" ms")
        self.timeExpBox.setDecimals(1)
        self.timeExpBox.setMinimum(0.0)
        self.timeExpBox.setMaximum(1000.0)
        self.timeExpBox.setSingleStep(0.1)
        self.timeExpBox.setProperty("value", 0.0)
        self.timeExpBox.setObjectName("timeExpBox")
        self.horizontalLayout_27.addWidget(self.timeExpBox)
        self.exposureDownBtn = QtWidgets.QPushButton(parent=self.tab_cap)
        self.exposureDownBtn.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exposureDownBtn.sizePolicy().hasHeightForWidth())
        self.exposureDownBtn.setSizePolicy(sizePolicy)
        self.exposureDownBtn.setMinimumSize(QtCore.QSize(40, 30))
        self.exposureDownBtn.setMaximumSize(QtCore.QSize(40, 30))
        self.exposureDownBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.exposureDownBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.exposureDownBtn.setToolTip("Reduce exposure time by 20 %.")
        self.exposureDownBtn.setStatusTip("")
        self.exposureDownBtn.setWhatsThis("")
        self.exposureDownBtn.setAccessibleName("")
        self.exposureDownBtn.setAccessibleDescription("")
        self.exposureDownBtn.setText("- Exp")
        self.exposureDownBtn.setObjectName("exposureDownBtn")
        self.horizontalLayout_27.addWidget(self.exposureDownBtn)
        self.exposureUpBtn = QtWidgets.QPushButton(parent=self.tab_cap)
        self.exposureUpBtn.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exposureUpBtn.sizePolicy().hasHeightForWidth())
        self.exposureUpBtn.setSizePolicy(sizePolicy)
        self.exposureUpBtn.setMinimumSize(QtCore.QSize(40, 30))
        self.exposureUpBtn.setMaximumSize(QtCore.QSize(40, 30))
        self.exposureUpBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.exposureUpBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.exposureUpBtn.setToolTip("Increase the exposure time by 20 %.")
        self.exposureUpBtn.setStatusTip("")
        self.exposureUpBtn.setWhatsThis("")
        self.exposureUpBtn.setAccessibleName("")
        self.exposureUpBtn.setAccessibleDescription("")
        self.exposureUpBtn.setText("+ Exp")
        self.exposureUpBtn.setObjectName("exposureUpBtn")
        self.horizontalLayout_27.addWidget(self.exposureUpBtn)
        spacerItem19 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_27.addItem(spacerItem19)
        self.verticalLayout_34.addLayout(self.horizontalLayout_27)
        self.horizontalLayout_29 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_29.setObjectName("horizontalLayout_29")
        self.capFolderBox = QtWidgets.QLineEdit(parent=self.tab_cap)
        self.capFolderBox.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.capFolderBox.sizePolicy().hasHeightForWidth())
        self.capFolderBox.setSizePolicy(sizePolicy)
        self.capFolderBox.setMinimumSize(QtCore.QSize(300, 30))
        self.capFolderBox.setMaximumSize(QtCore.QSize(300, 30))
        font = QtGui.QFont()
        font.setPointSize(9)
        self.capFolderBox.setFont(font)
        self.capFolderBox.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.capFolderBox.setToolTip("Shows the folder where the images\n"
"of the scanned frames will be saved.")
        self.capFolderBox.setStatusTip("")
        self.capFolderBox.setWhatsThis("")
        self.capFolderBox.setAccessibleName("")
        self.capFolderBox.setAccessibleDescription("")
        self.capFolderBox.setText("Select capture folder")
        self.capFolderBox.setMaxLength(1000)
        self.capFolderBox.setPlaceholderText("Seleccionar carpeta de captura ")
        self.capFolderBox.setObjectName("capFolderBox")
        self.horizontalLayout_29.addWidget(self.capFolderBox)
        self.chooseFolderBtn = QtWidgets.QPushButton(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.chooseFolderBtn.sizePolicy().hasHeightForWidth())
        self.chooseFolderBtn.setSizePolicy(sizePolicy)
        self.chooseFolderBtn.setMinimumSize(QtCore.QSize(60, 30))
        self.chooseFolderBtn.setMaximumSize(QtCore.QSize(60, 30))
        self.chooseFolderBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.chooseFolderBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.chooseFolderBtn.setToolTip("Selecting the folder to save the\n"
"images of the scanned frames.")
        self.chooseFolderBtn.setStatusTip("")
        self.chooseFolderBtn.setWhatsThis("")
        self.chooseFolderBtn.setAccessibleName("")
        self.chooseFolderBtn.setAccessibleDescription("")
        self.chooseFolderBtn.setText("Folder")
        self.chooseFolderBtn.setObjectName("chooseFolderBtn")
        self.horizontalLayout_29.addWidget(self.chooseFolderBtn)
        self.verticalLayout_34.addLayout(self.horizontalLayout_29)
        self.horizontalLayout_24 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_24.setSpacing(2)
        self.horizontalLayout_24.setObjectName("horizontalLayout_24")
        self.verticalLayout_27 = QtWidgets.QVBoxLayout()
        self.verticalLayout_27.setSpacing(2)
        self.verticalLayout_27.setObjectName("verticalLayout_27")
        self.groupBox_4 = QtWidgets.QGroupBox(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_4.sizePolicy().hasHeightForWidth())
        self.groupBox_4.setSizePolicy(sizePolicy)
        self.groupBox_4.setMinimumSize(QtCore.QSize(150, 145))
        self.groupBox_4.setMaximumSize(QtCore.QSize(150, 145))
        self.groupBox_4.setToolTip("")
        self.groupBox_4.setStatusTip("")
        self.groupBox_4.setWhatsThis("")
        self.groupBox_4.setAccessibleName("")
        self.groupBox_4.setAccessibleDescription("")
        self.groupBox_4.setTitle("Exposure time")
        self.groupBox_4.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_4.setObjectName("groupBox_4")
        self.verticalLayout_20 = QtWidgets.QVBoxLayout(self.groupBox_4)
        self.verticalLayout_20.setObjectName("verticalLayout_20")
        self.verticalLayout_13 = QtWidgets.QVBoxLayout()
        self.verticalLayout_13.setObjectName("verticalLayout_13")
        self.horizontalLayout_19 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_19.setSpacing(6)
        self.horizontalLayout_19.setObjectName("horizontalLayout_19")
        self.exposureLabelMin = QtWidgets.QLabel(parent=self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exposureLabelMin.sizePolicy().hasHeightForWidth())
        self.exposureLabelMin.setSizePolicy(sizePolicy)
        self.exposureLabelMin.setMinimumSize(QtCore.QSize(40, 25))
        self.exposureLabelMin.setMaximumSize(QtCore.QSize(40, 25))
        self.exposureLabelMin.setToolTip("Minimum time (ms) for bracketing exposures.\n"
"It is calculated based on the exposure time\n"
"reported by the camera and the number of stops.")
        self.exposureLabelMin.setStatusTip("")
        self.exposureLabelMin.setWhatsThis("")
        self.exposureLabelMin.setAccessibleName("")
        self.exposureLabelMin.setAccessibleDescription("")
        self.exposureLabelMin.setText("Min.")
        self.exposureLabelMin.setObjectName("exposureLabelMin")
        self.horizontalLayout_19.addWidget(self.exposureLabelMin)
        self.exposureBoxMin = QtWidgets.QDoubleSpinBox(parent=self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exposureBoxMin.sizePolicy().hasHeightForWidth())
        self.exposureBoxMin.setSizePolicy(sizePolicy)
        self.exposureBoxMin.setMinimumSize(QtCore.QSize(80, 25))
        self.exposureBoxMin.setMaximumSize(QtCore.QSize(80, 25))
        self.exposureBoxMin.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.exposureBoxMin.setToolTip("Minimum time (ms) for bracketing exposures.\n"
"It is calculated based on the exposure time\n"
"reported by the camera and the number of stops.")
        self.exposureBoxMin.setStatusTip("")
        self.exposureBoxMin.setWhatsThis("")
        self.exposureBoxMin.setAccessibleName("")
        self.exposureBoxMin.setAccessibleDescription("")
        self.exposureBoxMin.setReadOnly(True)
        self.exposureBoxMin.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.exposureBoxMin.setSpecialValueText("")
        self.exposureBoxMin.setDecimals(1)
        self.exposureBoxMin.setMinimum(0.0)
        self.exposureBoxMin.setMaximum(1000.0)
        self.exposureBoxMin.setSingleStep(0.1)
        self.exposureBoxMin.setObjectName("exposureBoxMin")
        self.horizontalLayout_19.addWidget(self.exposureBoxMin)
        self.verticalLayout_13.addLayout(self.horizontalLayout_19)
        self.horizontalLayout_20 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_20.setObjectName("horizontalLayout_20")
        self.exposureLabel = QtWidgets.QLabel(parent=self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exposureLabel.sizePolicy().hasHeightForWidth())
        self.exposureLabel.setSizePolicy(sizePolicy)
        self.exposureLabel.setMinimumSize(QtCore.QSize(40, 25))
        self.exposureLabel.setMaximumSize(QtCore.QSize(40, 25))
        self.exposureLabel.setToolTip("Nominal exposure time (ms) of the current frame.\n"
"In auto exposure it is the time reported by the camera.\n"
"In manual exposure, it is the set exposure time.\n"
"Used for the calculation of bracketing exposures.")
        self.exposureLabel.setStatusTip("")
        self.exposureLabel.setWhatsThis("")
        self.exposureLabel.setAccessibleName("")
        self.exposureLabel.setAccessibleDescription("")
        self.exposureLabel.setText("Nom.")
        self.exposureLabel.setObjectName("exposureLabel")
        self.horizontalLayout_20.addWidget(self.exposureLabel)
        self.exposureBox = QtWidgets.QDoubleSpinBox(parent=self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exposureBox.sizePolicy().hasHeightForWidth())
        self.exposureBox.setSizePolicy(sizePolicy)
        self.exposureBox.setMinimumSize(QtCore.QSize(80, 25))
        self.exposureBox.setMaximumSize(QtCore.QSize(80, 25))
        self.exposureBox.setToolTip("Nominal exposure time (ms) of the current frame.\n"
"In auto exposure it is the time reported by the camera.\n"
"In manual exposure, it is the set exposure time.\n"
"Used for the calculation of bracketing exposures.")
        self.exposureBox.setStatusTip("")
        self.exposureBox.setWhatsThis("")
        self.exposureBox.setAccessibleName("")
        self.exposureBox.setAccessibleDescription("")
        self.exposureBox.setReadOnly(True)
        self.exposureBox.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.exposureBox.setDecimals(1)
        self.exposureBox.setMinimum(0.0)
        self.exposureBox.setMaximum(1000.0)
        self.exposureBox.setSingleStep(0.1)
        self.exposureBox.setObjectName("exposureBox")
        self.horizontalLayout_20.addWidget(self.exposureBox)
        self.verticalLayout_13.addLayout(self.horizontalLayout_20)
        self.horizontalLayout_21 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_21.setObjectName("horizontalLayout_21")
        self.exposureLabelMax = QtWidgets.QLabel(parent=self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exposureLabelMax.sizePolicy().hasHeightForWidth())
        self.exposureLabelMax.setSizePolicy(sizePolicy)
        self.exposureLabelMax.setMinimumSize(QtCore.QSize(40, 25))
        self.exposureLabelMax.setMaximumSize(QtCore.QSize(40, 25))
        self.exposureLabelMax.setToolTip("Maximum time (ms) for bracketing exposures.\n"
"It is calculated based on the exposure time\n"
"reported by the camera and the number of stops.")
        self.exposureLabelMax.setStatusTip("")
        self.exposureLabelMax.setWhatsThis("")
        self.exposureLabelMax.setAccessibleName("")
        self.exposureLabelMax.setAccessibleDescription("")
        self.exposureLabelMax.setText("Max.")
        self.exposureLabelMax.setObjectName("exposureLabelMax")
        self.horizontalLayout_21.addWidget(self.exposureLabelMax)
        self.exposureBoxMax = QtWidgets.QDoubleSpinBox(parent=self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exposureBoxMax.sizePolicy().hasHeightForWidth())
        self.exposureBoxMax.setSizePolicy(sizePolicy)
        self.exposureBoxMax.setMinimumSize(QtCore.QSize(80, 25))
        self.exposureBoxMax.setMaximumSize(QtCore.QSize(80, 25))
        self.exposureBoxMax.setToolTip("Maximum time (ms) for bracketing exposures.\n"
"It is calculated based on the exposure time\n"
"reported by the camera and the number of stops.")
        self.exposureBoxMax.setStatusTip("")
        self.exposureBoxMax.setWhatsThis("")
        self.exposureBoxMax.setAccessibleName("")
        self.exposureBoxMax.setAccessibleDescription("")
        self.exposureBoxMax.setReadOnly(True)
        self.exposureBoxMax.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.exposureBoxMax.setDecimals(1)
        self.exposureBoxMax.setMaximum(1000.0)
        self.exposureBoxMax.setSingleStep(0.1)
        self.exposureBoxMax.setProperty("value", 0.0)
        self.exposureBoxMax.setObjectName("exposureBoxMax")
        self.horizontalLayout_21.addWidget(self.exposureBoxMax)
        self.verticalLayout_13.addLayout(self.horizontalLayout_21)
        self.horizontalLayout_22 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_22.setObjectName("horizontalLayout_22")
        self.FPSLabel = QtWidgets.QLabel(parent=self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.FPSLabel.sizePolicy().hasHeightForWidth())
        self.FPSLabel.setSizePolicy(sizePolicy)
        self.FPSLabel.setMinimumSize(QtCore.QSize(40, 25))
        self.FPSLabel.setMaximumSize(QtCore.QSize(40, 25))
        self.FPSLabel.setToolTip("Camera capture speed.\n"
"Framerate parameter in frames per second.")
        self.FPSLabel.setStatusTip("")
        self.FPSLabel.setWhatsThis("")
        self.FPSLabel.setAccessibleName("")
        self.FPSLabel.setAccessibleDescription("")
        self.FPSLabel.setText("fps")
        self.FPSLabel.setObjectName("FPSLabel")
        self.horizontalLayout_22.addWidget(self.FPSLabel)
        self.FPSdoubleSpinBox = QtWidgets.QDoubleSpinBox(parent=self.groupBox_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.FPSdoubleSpinBox.sizePolicy().hasHeightForWidth())
        self.FPSdoubleSpinBox.setSizePolicy(sizePolicy)
        self.FPSdoubleSpinBox.setMinimumSize(QtCore.QSize(80, 25))
        self.FPSdoubleSpinBox.setMaximumSize(QtCore.QSize(80, 25))
        self.FPSdoubleSpinBox.setToolTip("Camera capture speed.\n"
"Framerate parameter in frames per second.")
        self.FPSdoubleSpinBox.setStatusTip("")
        self.FPSdoubleSpinBox.setWhatsThis("")
        self.FPSdoubleSpinBox.setAccessibleName("")
        self.FPSdoubleSpinBox.setAccessibleDescription("")
        self.FPSdoubleSpinBox.setReadOnly(True)
        self.FPSdoubleSpinBox.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.FPSdoubleSpinBox.setSpecialValueText("")
        self.FPSdoubleSpinBox.setSuffix("")
        self.FPSdoubleSpinBox.setDecimals(1)
        self.FPSdoubleSpinBox.setMinimum(1.0)
        self.FPSdoubleSpinBox.setMaximum(60.0)
        self.FPSdoubleSpinBox.setSingleStep(0.1)
        self.FPSdoubleSpinBox.setProperty("value", 1.0)
        self.FPSdoubleSpinBox.setObjectName("FPSdoubleSpinBox")
        self.horizontalLayout_22.addWidget(self.FPSdoubleSpinBox)
        self.verticalLayout_13.addLayout(self.horizontalLayout_22)
        self.verticalLayout_20.addLayout(self.verticalLayout_13)
        self.verticalLayout_27.addWidget(self.groupBox_4)
        self.gainLabelD = QtWidgets.QGroupBox(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gainLabelD.sizePolicy().hasHeightForWidth())
        self.gainLabelD.setSizePolicy(sizePolicy)
        self.gainLabelD.setMinimumSize(QtCore.QSize(150, 55))
        self.gainLabelD.setMaximumSize(QtCore.QSize(150, 55))
        self.gainLabelD.setTitle("Gains")
        self.gainLabelD.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)
        self.gainLabelD.setObjectName("gainLabelD")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.gainLabelD)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.gainLabelA = QtWidgets.QLabel(parent=self.gainLabelD)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gainLabelA.sizePolicy().hasHeightForWidth())
        self.gainLabelA.setSizePolicy(sizePolicy)
        self.gainLabelA.setMinimumSize(QtCore.QSize(10, 25))
        self.gainLabelA.setMaximumSize(QtCore.QSize(10, 25))
        self.gainLabelA.setText("A")
        self.gainLabelA.setObjectName("gainLabelA")
        self.horizontalLayout_7.addWidget(self.gainLabelA)
        self.gainBoxA = QtWidgets.QDoubleSpinBox(parent=self.gainLabelD)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gainBoxA.sizePolicy().hasHeightForWidth())
        self.gainBoxA.setSizePolicy(sizePolicy)
        self.gainBoxA.setMinimumSize(QtCore.QSize(40, 25))
        self.gainBoxA.setMaximumSize(QtCore.QSize(40, 25))
        self.gainBoxA.setToolTip("Analog gain reported by the camera.\n"
"Values between 1 and 16.")
        self.gainBoxA.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.gainBoxA.setReadOnly(True)
        self.gainBoxA.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.gainBoxA.setDecimals(1)
        self.gainBoxA.setMaximum(20.0)
        self.gainBoxA.setSingleStep(0.1)
        self.gainBoxA.setObjectName("gainBoxA")
        self.horizontalLayout_7.addWidget(self.gainBoxA)
        spacerItem20 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_7.addItem(spacerItem20)
        self.gainLabelD_2 = QtWidgets.QLabel(parent=self.gainLabelD)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gainLabelD_2.sizePolicy().hasHeightForWidth())
        self.gainLabelD_2.setSizePolicy(sizePolicy)
        self.gainLabelD_2.setMinimumSize(QtCore.QSize(10, 25))
        self.gainLabelD_2.setMaximumSize(QtCore.QSize(10, 25))
        self.gainLabelD_2.setText("D")
        self.gainLabelD_2.setObjectName("gainLabelD_2")
        self.horizontalLayout_7.addWidget(self.gainLabelD_2)
        self.gainBoxD = QtWidgets.QDoubleSpinBox(parent=self.gainLabelD)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gainBoxD.sizePolicy().hasHeightForWidth())
        self.gainBoxD.setSizePolicy(sizePolicy)
        self.gainBoxD.setMinimumSize(QtCore.QSize(40, 25))
        self.gainBoxD.setMaximumSize(QtCore.QSize(40, 25))
        self.gainBoxD.setToolTip("Digital gain reported by camera.\n"
"If it is not close to 1, the lighting is too low.")
        self.gainBoxD.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.gainBoxD.setReadOnly(True)
        self.gainBoxD.setButtonSymbols(QtWidgets.QAbstractSpinBox.ButtonSymbols.NoButtons)
        self.gainBoxD.setDecimals(1)
        self.gainBoxD.setMaximum(20.0)
        self.gainBoxD.setSingleStep(0.1)
        self.gainBoxD.setObjectName("gainBoxD")
        self.horizontalLayout_7.addWidget(self.gainBoxD)
        self.verticalLayout_27.addWidget(self.gainLabelD)
        self.horizontalLayout_24.addLayout(self.verticalLayout_27)
        self.groupBox_6 = QtWidgets.QGroupBox(parent=self.tab_cap)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_6.sizePolicy().hasHeightForWidth())
        self.groupBox_6.setSizePolicy(sizePolicy)
        self.groupBox_6.setMinimumSize(QtCore.QSize(214, 202))
        self.groupBox_6.setMaximumSize(QtCore.QSize(214, 202))
        self.groupBox_6.setToolTip("")
        self.groupBox_6.setStatusTip("")
        self.groupBox_6.setWhatsThis("")
        self.groupBox_6.setAccessibleName("")
        self.groupBox_6.setAccessibleDescription("")
        self.groupBox_6.setTitle("Film movement")
        self.groupBox_6.setAlignment(QtCore.Qt.AlignmentFlag.AlignHCenter|QtCore.Qt.AlignmentFlag.AlignTop)
        self.groupBox_6.setObjectName("groupBox_6")
        self.verticalLayout_58 = QtWidgets.QVBoxLayout(self.groupBox_6)
        self.verticalLayout_58.setObjectName("verticalLayout_58")
        self.horizontalLayout_108 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_108.setObjectName("horizontalLayout_108")
        self.frameLcd = QtWidgets.QLCDNumber(parent=self.groupBox_6)
        self.frameLcd.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frameLcd.sizePolicy().hasHeightForWidth())
        self.frameLcd.setSizePolicy(sizePolicy)
        self.frameLcd.setMinimumSize(QtCore.QSize(130, 45))
        self.frameLcd.setMaximumSize(QtCore.QSize(130, 45))
        self.frameLcd.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.ArrowCursor))
        self.frameLcd.setToolTip("Film position indicator.\n"
"Frame number from the initial frame.")
        self.frameLcd.setStatusTip("")
        self.frameLcd.setWhatsThis("")
        self.frameLcd.setAccessibleName("")
        self.frameLcd.setAccessibleDescription("")
        self.frameLcd.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.frameLcd.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frameLcd.setLineWidth(2)
        self.frameLcd.setMidLineWidth(0)
        self.frameLcd.setSegmentStyle(QtWidgets.QLCDNumber.SegmentStyle.Flat)
        self.frameLcd.setProperty("intValue", 0)
        self.frameLcd.setObjectName("frameLcd")
        self.horizontalLayout_108.addWidget(self.frameLcd)
        spacerItem21 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_108.addItem(spacerItem21)
        self.verticalLayout_17 = QtWidgets.QVBoxLayout()
        self.verticalLayout_17.setObjectName("verticalLayout_17")
        self.activateMotorCheckBox = QtWidgets.QCheckBox(parent=self.groupBox_6)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.activateMotorCheckBox.sizePolicy().hasHeightForWidth())
        self.activateMotorCheckBox.setSizePolicy(sizePolicy)
        self.activateMotorCheckBox.setMinimumSize(QtCore.QSize(58, 20))
        self.activateMotorCheckBox.setMaximumSize(QtCore.QSize(58, 20))
        self.activateMotorCheckBox.setToolTip("Disable the motor to allow manual\n"
"movement of the film.")
        self.activateMotorCheckBox.setStatusTip("")
        self.activateMotorCheckBox.setWhatsThis("")
        self.activateMotorCheckBox.setAccessibleName("")
        self.activateMotorCheckBox.setAccessibleDescription("")
        self.activateMotorCheckBox.setText("Motor")
        self.activateMotorCheckBox.setChecked(True)
        self.activateMotorCheckBox.setObjectName("activateMotorCheckBox")
        self.verticalLayout_17.addWidget(self.activateMotorCheckBox)
        self.horizontalLayout_30 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_30.setObjectName("horizontalLayout_30")
        self.frameLCDCountUpBtn = QtWidgets.QToolButton(parent=self.groupBox_6)
        self.frameLCDCountUpBtn.setEnabled(False)
        self.frameLCDCountUpBtn.setMinimumSize(QtCore.QSize(20, 20))
        self.frameLCDCountUpBtn.setMaximumSize(QtCore.QSize(20, 20))
        self.frameLCDCountUpBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.frameLCDCountUpBtn.setToolTip("Increase the position indicator of the film.")
        self.frameLCDCountUpBtn.setStatusTip("")
        self.frameLCDCountUpBtn.setWhatsThis("")
        self.frameLCDCountUpBtn.setAccessibleName("")
        self.frameLCDCountUpBtn.setAccessibleDescription("")
        self.frameLCDCountUpBtn.setText("...")
        self.frameLCDCountUpBtn.setAutoRepeat(True)
        self.frameLCDCountUpBtn.setArrowType(QtCore.Qt.ArrowType.UpArrow)
        self.frameLCDCountUpBtn.setObjectName("frameLCDCountUpBtn")
        self.horizontalLayout_30.addWidget(self.frameLCDCountUpBtn)
        self.frameLCDCountDownBtn = QtWidgets.QToolButton(parent=self.groupBox_6)
        self.frameLCDCountDownBtn.setEnabled(False)
        self.frameLCDCountDownBtn.setMinimumSize(QtCore.QSize(20, 20))
        self.frameLCDCountDownBtn.setMaximumSize(QtCore.QSize(20, 20))
        self.frameLCDCountDownBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.frameLCDCountDownBtn.setToolTip("Decrease the position indicator of the film.")
        self.frameLCDCountDownBtn.setStatusTip("")
        self.frameLCDCountDownBtn.setWhatsThis("")
        self.frameLCDCountDownBtn.setAccessibleName("")
        self.frameLCDCountDownBtn.setAccessibleDescription("")
        self.frameLCDCountDownBtn.setText("...")
        self.frameLCDCountDownBtn.setAutoRepeat(True)
        self.frameLCDCountDownBtn.setArrowType(QtCore.Qt.ArrowType.DownArrow)
        self.frameLCDCountDownBtn.setObjectName("frameLCDCountDownBtn")
        self.horizontalLayout_30.addWidget(self.frameLCDCountDownBtn)
        self.verticalLayout_17.addLayout(self.horizontalLayout_30)
        self.horizontalLayout_108.addLayout(self.verticalLayout_17)
        self.verticalLayout_58.addLayout(self.horizontalLayout_108)
        self.horizontalLayout_109 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_109.setObjectName("horizontalLayout_109")
        spacerItem22 = QtWidgets.QSpacerItem(18, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_109.addItem(spacerItem22)
        self.gotoCheckBox = QtWidgets.QCheckBox(parent=self.groupBox_6)
        self.gotoCheckBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.gotoCheckBox.sizePolicy().hasHeightForWidth())
        self.gotoCheckBox.setSizePolicy(sizePolicy)
        self.gotoCheckBox.setMinimumSize(QtCore.QSize(40, 30))
        self.gotoCheckBox.setMaximumSize(QtCore.QSize(40, 30))
        self.gotoCheckBox.setToolTip("Position the film in the indicated frame.")
        self.gotoCheckBox.setStatusTip("")
        self.gotoCheckBox.setWhatsThis("")
        self.gotoCheckBox.setAccessibleName("")
        self.gotoCheckBox.setAccessibleDescription("")
        self.gotoCheckBox.setText("Go")
        self.gotoCheckBox.setObjectName("gotoCheckBox")
        self.horizontalLayout_109.addWidget(self.gotoCheckBox)
        self.passToCheckbox = QtWidgets.QCheckBox(parent=self.groupBox_6)
        self.passToCheckbox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.passToCheckbox.sizePolicy().hasHeightForWidth())
        self.passToCheckbox.setSizePolicy(sizePolicy)
        self.passToCheckbox.setMinimumSize(QtCore.QSize(65, 30))
        self.passToCheckbox.setMaximumSize(QtCore.QSize(65, 30))
        self.passToCheckbox.setToolTip("Position indicator on this number.")
        self.passToCheckbox.setStatusTip("")
        self.passToCheckbox.setWhatsThis("")
        self.passToCheckbox.setAccessibleName("")
        self.passToCheckbox.setAccessibleDescription("")
        self.passToCheckbox.setText("Pass to")
        self.passToCheckbox.setObjectName("passToCheckbox")
        self.horizontalLayout_109.addWidget(self.passToCheckbox)
        self.nextFrameBox = QtWidgets.QSpinBox(parent=self.groupBox_6)
        self.nextFrameBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.nextFrameBox.sizePolicy().hasHeightForWidth())
        self.nextFrameBox.setSizePolicy(sizePolicy)
        self.nextFrameBox.setMinimumSize(QtCore.QSize(70, 30))
        self.nextFrameBox.setMaximumSize(QtCore.QSize(70, 30))
        self.nextFrameBox.setToolTip("Frame number where you want to place\n"
"the film or position indicator.")
        self.nextFrameBox.setStatusTip("")
        self.nextFrameBox.setWhatsThis("")
        self.nextFrameBox.setAccessibleName("")
        self.nextFrameBox.setAccessibleDescription("")
        self.nextFrameBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.nextFrameBox.setSpecialValueText("")
        self.nextFrameBox.setAccelerated(False)
        self.nextFrameBox.setMaximum(30000)
        self.nextFrameBox.setProperty("value", 1)
        self.nextFrameBox.setObjectName("nextFrameBox")
        self.horizontalLayout_109.addWidget(self.nextFrameBox)
        spacerItem23 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_109.addItem(spacerItem23)
        self.verticalLayout_58.addLayout(self.horizontalLayout_109)
        self.horizontalLayout_110 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_110.setObjectName("horizontalLayout_110")
        self.captureFrmRev10 = QtWidgets.QPushButton(parent=self.groupBox_6)
        self.captureFrmRev10.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.captureFrmRev10.sizePolicy().hasHeightForWidth())
        self.captureFrmRev10.setSizePolicy(sizePolicy)
        self.captureFrmRev10.setMinimumSize(QtCore.QSize(45, 30))
        self.captureFrmRev10.setMaximumSize(QtCore.QSize(45, 30))
        self.captureFrmRev10.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.captureFrmRev10.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.captureFrmRev10.setToolTip("Go back 10 frames.")
        self.captureFrmRev10.setStatusTip("")
        self.captureFrmRev10.setWhatsThis("")
        self.captureFrmRev10.setAccessibleName("")
        self.captureFrmRev10.setAccessibleDescription("")
        self.captureFrmRev10.setText("<-10")
        self.captureFrmRev10.setObjectName("captureFrmRev10")
        self.horizontalLayout_110.addWidget(self.captureFrmRev10)
        self.captureFrmRev = QtWidgets.QPushButton(parent=self.groupBox_6)
        self.captureFrmRev.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.captureFrmRev.sizePolicy().hasHeightForWidth())
        self.captureFrmRev.setSizePolicy(sizePolicy)
        self.captureFrmRev.setMinimumSize(QtCore.QSize(45, 30))
        self.captureFrmRev.setMaximumSize(QtCore.QSize(45, 30))
        self.captureFrmRev.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.captureFrmRev.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.captureFrmRev.setToolTip("Go back 1 frame.")
        self.captureFrmRev.setStatusTip("")
        self.captureFrmRev.setWhatsThis("")
        self.captureFrmRev.setAccessibleName("")
        self.captureFrmRev.setAccessibleDescription("")
        self.captureFrmRev.setText("<- 1")
        self.captureFrmRev.setObjectName("captureFrmRev")
        self.horizontalLayout_110.addWidget(self.captureFrmRev)
        self.captureFrmAdv = QtWidgets.QPushButton(parent=self.groupBox_6)
        self.captureFrmAdv.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.captureFrmAdv.sizePolicy().hasHeightForWidth())
        self.captureFrmAdv.setSizePolicy(sizePolicy)
        self.captureFrmAdv.setMinimumSize(QtCore.QSize(45, 30))
        self.captureFrmAdv.setMaximumSize(QtCore.QSize(45, 30))
        self.captureFrmAdv.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.captureFrmAdv.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.captureFrmAdv.setToolTip("Advance 1 frame.")
        self.captureFrmAdv.setStatusTip("")
        self.captureFrmAdv.setWhatsThis("")
        self.captureFrmAdv.setAccessibleName("")
        self.captureFrmAdv.setAccessibleDescription("")
        self.captureFrmAdv.setText("1 ->")
        self.captureFrmAdv.setObjectName("captureFrmAdv")
        self.horizontalLayout_110.addWidget(self.captureFrmAdv)
        self.captureFrmAdv10 = QtWidgets.QPushButton(parent=self.groupBox_6)
        self.captureFrmAdv10.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.captureFrmAdv10.sizePolicy().hasHeightForWidth())
        self.captureFrmAdv10.setSizePolicy(sizePolicy)
        self.captureFrmAdv10.setMinimumSize(QtCore.QSize(45, 30))
        self.captureFrmAdv10.setMaximumSize(QtCore.QSize(45, 30))
        self.captureFrmAdv10.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.captureFrmAdv10.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.captureFrmAdv10.setToolTip("Advance 10 frames.")
        self.captureFrmAdv10.setStatusTip("")
        self.captureFrmAdv10.setWhatsThis("")
        self.captureFrmAdv10.setAccessibleName("")
        self.captureFrmAdv10.setAccessibleDescription("")
        self.captureFrmAdv10.setText("10->")
        self.captureFrmAdv10.setObjectName("captureFrmAdv10")
        self.horizontalLayout_110.addWidget(self.captureFrmAdv10)
        self.verticalLayout_58.addLayout(self.horizontalLayout_110)
        self.horizontalLayout_111 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_111.setObjectName("horizontalLayout_111")
        spacerItem24 = QtWidgets.QSpacerItem(12, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_111.addItem(spacerItem24)
        self.captureStopBtn = QtWidgets.QPushButton(parent=self.groupBox_6)
        self.captureStopBtn.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.captureStopBtn.sizePolicy().hasHeightForWidth())
        self.captureStopBtn.setSizePolicy(sizePolicy)
        self.captureStopBtn.setMinimumSize(QtCore.QSize(60, 30))
        self.captureStopBtn.setMaximumSize(QtCore.QSize(60, 30))
        self.captureStopBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.captureStopBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.captureStopBtn.setToolTip("Stop capture.")
        self.captureStopBtn.setStatusTip("")
        self.captureStopBtn.setWhatsThis("")
        self.captureStopBtn.setAccessibleName("")
        self.captureStopBtn.setAccessibleDescription("")
        self.captureStopBtn.setText("Stop")
        self.captureStopBtn.setObjectName("captureStopBtn")
        self.horizontalLayout_111.addWidget(self.captureStopBtn)
        spacerItem25 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_111.addItem(spacerItem25)
        self.captureStartBtn = QtWidgets.QPushButton(parent=self.groupBox_6)
        self.captureStartBtn.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.captureStartBtn.sizePolicy().hasHeightForWidth())
        self.captureStartBtn.setSizePolicy(sizePolicy)
        self.captureStartBtn.setMinimumSize(QtCore.QSize(60, 30))
        self.captureStartBtn.setMaximumSize(QtCore.QSize(60, 30))
        self.captureStartBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.captureStartBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.captureStartBtn.setToolTip("Start capture.")
        self.captureStartBtn.setStatusTip("")
        self.captureStartBtn.setWhatsThis("")
        self.captureStartBtn.setAccessibleName("")
        self.captureStartBtn.setAccessibleDescription("")
        self.captureStartBtn.setText("Start")
        self.captureStartBtn.setObjectName("captureStartBtn")
        self.horizontalLayout_111.addWidget(self.captureStartBtn)
        spacerItem26 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_111.addItem(spacerItem26)
        self.capturePauseBtn = QtWidgets.QPushButton(parent=self.groupBox_6)
        self.capturePauseBtn.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.capturePauseBtn.sizePolicy().hasHeightForWidth())
        self.capturePauseBtn.setSizePolicy(sizePolicy)
        self.capturePauseBtn.setMinimumSize(QtCore.QSize(60, 30))
        self.capturePauseBtn.setMaximumSize(QtCore.QSize(60, 30))
        self.capturePauseBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.capturePauseBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.capturePauseBtn.setToolTip("Pause capture.")
        self.capturePauseBtn.setStatusTip("")
        self.capturePauseBtn.setWhatsThis("")
        self.capturePauseBtn.setAccessibleName("")
        self.capturePauseBtn.setAccessibleDescription("")
        self.capturePauseBtn.setText("Pause")
        self.capturePauseBtn.setCheckable(True)
        self.capturePauseBtn.setObjectName("capturePauseBtn")
        self.horizontalLayout_111.addWidget(self.capturePauseBtn)
        self.verticalLayout_58.addLayout(self.horizontalLayout_111)
        self.horizontalLayout_24.addWidget(self.groupBox_6)
        self.verticalLayout_34.addLayout(self.horizontalLayout_24)
        self.DS8tabWidget.addTab(self.tab_cap, "Capture")
        self.DS8tabWidget.setTabToolTip(self.DS8tabWidget.indexOf(self.tab_cap), "Capture parameters:\n"
"- Last frame to digitize.\n"
"- Number of photos per frame.\n"
"- Test photo.\n"
"- Save bracketing images.\n"
"- Stop points in multiple exposures.\n"
"- Auto / manual exposure.\n"
"- Manual exposure time adjustment.\n"
"- Capture folder.\n"
"- Exposure time and gains information.\n"
"- Motion of the film.")
        self.tab_adv = QtWidgets.QWidget()
        self.tab_adv.setObjectName("tab_adv")
        self.verticalLayout_14 = QtWidgets.QVBoxLayout(self.tab_adv)
        self.verticalLayout_14.setObjectName("verticalLayout_14")
        self.horizontalLayout_32 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_32.setObjectName("horizontalLayout_32")
        self.vFlipCheckBox = QtWidgets.QCheckBox(parent=self.tab_adv)
        self.vFlipCheckBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.vFlipCheckBox.sizePolicy().hasHeightForWidth())
        self.vFlipCheckBox.setSizePolicy(sizePolicy)
        self.vFlipCheckBox.setMinimumSize(QtCore.QSize(50, 30))
        self.vFlipCheckBox.setMaximumSize(QtCore.QSize(50, 30))
        self.vFlipCheckBox.setToolTip("Image flip vertically.")
        self.vFlipCheckBox.setStatusTip("")
        self.vFlipCheckBox.setWhatsThis("")
        self.vFlipCheckBox.setAccessibleName("")
        self.vFlipCheckBox.setAccessibleDescription("")
        self.vFlipCheckBox.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.vFlipCheckBox.setText("V flip")
        self.vFlipCheckBox.setObjectName("vFlipCheckBox")
        self.horizontalLayout_32.addWidget(self.vFlipCheckBox)
        spacerItem27 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_32.addItem(spacerItem27)
        self.hFlipCheckBox = QtWidgets.QCheckBox(parent=self.tab_adv)
        self.hFlipCheckBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.hFlipCheckBox.sizePolicy().hasHeightForWidth())
        self.hFlipCheckBox.setSizePolicy(sizePolicy)
        self.hFlipCheckBox.setMinimumSize(QtCore.QSize(52, 30))
        self.hFlipCheckBox.setMaximumSize(QtCore.QSize(52, 30))
        self.hFlipCheckBox.setToolTip("Image flip horizontally.")
        self.hFlipCheckBox.setStatusTip("")
        self.hFlipCheckBox.setWhatsThis("")
        self.hFlipCheckBox.setAccessibleName("")
        self.hFlipCheckBox.setAccessibleDescription("")
        self.hFlipCheckBox.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.hFlipCheckBox.setText("H flip")
        self.hFlipCheckBox.setObjectName("hFlipCheckBox")
        self.horizontalLayout_32.addWidget(self.hFlipCheckBox)
        spacerItem28 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_32.addItem(spacerItem28)
        self.bwCheckBox = QtWidgets.QCheckBox(parent=self.tab_adv)
        self.bwCheckBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.bwCheckBox.sizePolicy().hasHeightForWidth())
        self.bwCheckBox.setSizePolicy(sizePolicy)
        self.bwCheckBox.setMinimumSize(QtCore.QSize(50, 30))
        self.bwCheckBox.setMaximumSize(QtCore.QSize(50, 30))
        self.bwCheckBox.setToolTip("Take black and white images.")
        self.bwCheckBox.setStatusTip("")
        self.bwCheckBox.setWhatsThis("")
        self.bwCheckBox.setAccessibleName("")
        self.bwCheckBox.setAccessibleDescription("")
        self.bwCheckBox.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.bwCheckBox.setText("B/W")
        self.bwCheckBox.setObjectName("bwCheckBox")
        self.horizontalLayout_32.addWidget(self.bwCheckBox)
        self.verticalLayout_14.addLayout(self.horizontalLayout_32)
        self.horizontalLayout_26 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_26.setObjectName("horizontalLayout_26")
        spacerItem29 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_26.addItem(spacerItem29)
        self.constraintModeLabel = QtWidgets.QLabel(parent=self.tab_adv)
        self.constraintModeLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.constraintModeLabel.sizePolicy().hasHeightForWidth())
        self.constraintModeLabel.setSizePolicy(sizePolicy)
        self.constraintModeLabel.setMinimumSize(QtCore.QSize(226, 30))
        self.constraintModeLabel.setMaximumSize(QtCore.QSize(226, 30))
        self.constraintModeLabel.setToolTip("Sets the restriction mode for\n"
"the auto exposure algorithm AEC/AGC.\n"
"Camera default: Normal.")
        self.constraintModeLabel.setStatusTip("")
        self.constraintModeLabel.setWhatsThis("")
        self.constraintModeLabel.setAccessibleName("")
        self.constraintModeLabel.setAccessibleDescription("")
        self.constraintModeLabel.setText("Auto exposure restriction")
        self.constraintModeLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.constraintModeLabel.setObjectName("constraintModeLabel")
        self.horizontalLayout_26.addWidget(self.constraintModeLabel)
        self.constraintModeBox = QtWidgets.QComboBox(parent=self.tab_adv)
        self.constraintModeBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.constraintModeBox.sizePolicy().hasHeightForWidth())
        self.constraintModeBox.setSizePolicy(sizePolicy)
        self.constraintModeBox.setMinimumSize(QtCore.QSize(90, 30))
        self.constraintModeBox.setMaximumSize(QtCore.QSize(90, 30))
        self.constraintModeBox.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.constraintModeBox.setToolTip("Sets the restriction mode for\n"
"the auto exposure algorithm AEC/AGC.\n"
"Camera default: Normal.")
        self.constraintModeBox.setStatusTip("")
        self.constraintModeBox.setWhatsThis("")
        self.constraintModeBox.setAccessibleName("")
        self.constraintModeBox.setAccessibleDescription("")
        self.constraintModeBox.setMaxVisibleItems(4)
        self.constraintModeBox.setMaxCount(4)
        self.constraintModeBox.setObjectName("constraintModeBox")
        self.constraintModeBox.addItem("")
        self.constraintModeBox.addItem("")
        self.constraintModeBox.addItem("")
        self.horizontalLayout_26.addWidget(self.constraintModeBox)
        self.verticalLayout_14.addLayout(self.horizontalLayout_26)
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        spacerItem30 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_12.addItem(spacerItem30)
        self.exposureModeLabel = QtWidgets.QLabel(parent=self.tab_adv)
        self.exposureModeLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exposureModeLabel.sizePolicy().hasHeightForWidth())
        self.exposureModeLabel.setSizePolicy(sizePolicy)
        self.exposureModeLabel.setMinimumSize(QtCore.QSize(200, 30))
        self.exposureModeLabel.setMaximumSize(QtCore.QSize(200, 30))
        self.exposureModeLabel.setToolTip("Sets the exposure mode for\n"
"the auto exposure algorithm AEC/AGC.\n"
"Camera default: Normal.")
        self.exposureModeLabel.setStatusTip("")
        self.exposureModeLabel.setWhatsThis("")
        self.exposureModeLabel.setAccessibleName("")
        self.exposureModeLabel.setAccessibleDescription("")
        self.exposureModeLabel.setText("Auto exposure mode")
        self.exposureModeLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.exposureModeLabel.setObjectName("exposureModeLabel")
        self.horizontalLayout_12.addWidget(self.exposureModeLabel)
        self.exposureModeBox = QtWidgets.QComboBox(parent=self.tab_adv)
        self.exposureModeBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.exposureModeBox.sizePolicy().hasHeightForWidth())
        self.exposureModeBox.setSizePolicy(sizePolicy)
        self.exposureModeBox.setMinimumSize(QtCore.QSize(125, 30))
        self.exposureModeBox.setMaximumSize(QtCore.QSize(125, 30))
        self.exposureModeBox.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.exposureModeBox.setToolTip("Sets the exposure mode for\n"
"the auto exposure algorithm AEC/AGC.\n"
"Camera default: Normal.")
        self.exposureModeBox.setStatusTip("")
        self.exposureModeBox.setWhatsThis("")
        self.exposureModeBox.setAccessibleName("")
        self.exposureModeBox.setAccessibleDescription("")
        self.exposureModeBox.setMaxVisibleItems(4)
        self.exposureModeBox.setMaxCount(4)
        self.exposureModeBox.setObjectName("exposureModeBox")
        self.exposureModeBox.addItem("")
        self.exposureModeBox.addItem("")
        self.exposureModeBox.addItem("")
        self.horizontalLayout_12.addWidget(self.exposureModeBox)
        self.verticalLayout_14.addLayout(self.horizontalLayout_12)
        self.horizontalLayout_33 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_33.setObjectName("horizontalLayout_33")
        spacerItem31 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_33.addItem(spacerItem31)
        self.meteringModeLabel = QtWidgets.QLabel(parent=self.tab_adv)
        self.meteringModeLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.meteringModeLabel.sizePolicy().hasHeightForWidth())
        self.meteringModeLabel.setSizePolicy(sizePolicy)
        self.meteringModeLabel.setMinimumSize(QtCore.QSize(200, 30))
        self.meteringModeLabel.setMaximumSize(QtCore.QSize(200, 30))
        self.meteringModeLabel.setStatusTip("")
        self.meteringModeLabel.setWhatsThis("")
        self.meteringModeLabel.setAccessibleName("")
        self.meteringModeLabel.setAccessibleDescription("")
        self.meteringModeLabel.setText("Auto exposure metering mode")
        self.meteringModeLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.meteringModeLabel.setObjectName("meteringModeLabel")
        self.horizontalLayout_33.addWidget(self.meteringModeLabel)
        self.meteringModeBox = QtWidgets.QComboBox(parent=self.tab_adv)
        self.meteringModeBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.meteringModeBox.sizePolicy().hasHeightForWidth())
        self.meteringModeBox.setSizePolicy(sizePolicy)
        self.meteringModeBox.setMinimumSize(QtCore.QSize(142, 30))
        self.meteringModeBox.setMaximumSize(QtCore.QSize(142, 30))
        self.meteringModeBox.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.meteringModeBox.setToolTip("Sets the auto exposure metering mode for\n"
"the auto exposure algorithm AEC/AGC.\n"
"Camera default: Centre weighted.")
        self.meteringModeBox.setStatusTip("")
        self.meteringModeBox.setWhatsThis("")
        self.meteringModeBox.setAccessibleName("")
        self.meteringModeBox.setAccessibleDescription("")
        self.meteringModeBox.setMaxVisibleItems(4)
        self.meteringModeBox.setMaxCount(4)
        self.meteringModeBox.setObjectName("meteringModeBox")
        self.meteringModeBox.addItem("")
        self.meteringModeBox.addItem("")
        self.meteringModeBox.addItem("")
        self.horizontalLayout_33.addWidget(self.meteringModeBox)
        self.verticalLayout_14.addLayout(self.horizontalLayout_33)
        self.horizontalLayout_25 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_25.setObjectName("horizontalLayout_25")
        spacerItem32 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_25.addItem(spacerItem32)
        self.resolutionLabel = QtWidgets.QLabel(parent=self.tab_adv)
        self.resolutionLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.resolutionLabel.sizePolicy().hasHeightForWidth())
        self.resolutionLabel.setSizePolicy(sizePolicy)
        self.resolutionLabel.setMinimumSize(QtCore.QSize(200, 30))
        self.resolutionLabel.setMaximumSize(QtCore.QSize(200, 30))
        self.resolutionLabel.setToolTip("Select capture resolution (pixels).")
        self.resolutionLabel.setStatusTip("")
        self.resolutionLabel.setWhatsThis("")
        self.resolutionLabel.setAccessibleName("")
        self.resolutionLabel.setAccessibleDescription("")
        self.resolutionLabel.setText("Capture resolution")
        self.resolutionLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.resolutionLabel.setObjectName("resolutionLabel")
        self.horizontalLayout_25.addWidget(self.resolutionLabel)
        self.resolutionBox = QtWidgets.QComboBox(parent=self.tab_adv)
        self.resolutionBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.resolutionBox.sizePolicy().hasHeightForWidth())
        self.resolutionBox.setSizePolicy(sizePolicy)
        self.resolutionBox.setMinimumSize(QtCore.QSize(125, 30))
        self.resolutionBox.setMaximumSize(QtCore.QSize(125, 30))
        self.resolutionBox.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.resolutionBox.setToolTip("Select capture resolution (pixels).")
        self.resolutionBox.setStatusTip("")
        self.resolutionBox.setWhatsThis("")
        self.resolutionBox.setAccessibleName("")
        self.resolutionBox.setAccessibleDescription("")
        self.resolutionBox.setCurrentText("2028x1520 px")
        self.resolutionBox.setMaxCount(10)
        self.resolutionBox.setPlaceholderText("")
        self.resolutionBox.setObjectName("resolutionBox")
        self.resolutionBox.addItem("")
        self.resolutionBox.setItemText(0, "2028x1520 px")
        self.resolutionBox.addItem("")
        self.resolutionBox.setItemText(1, "4056x3040 px")
        self.horizontalLayout_25.addWidget(self.resolutionBox)
        self.verticalLayout_14.addLayout(self.horizontalLayout_25)
        self.horizontalLayout_15 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_15.setObjectName("horizontalLayout_15")
        spacerItem33 = QtWidgets.QSpacerItem(15, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_15.addItem(spacerItem33)
        self.sharpnessLabel = QtWidgets.QLabel(parent=self.tab_adv)
        self.sharpnessLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sharpnessLabel.sizePolicy().hasHeightForWidth())
        self.sharpnessLabel.setSizePolicy(sizePolicy)
        self.sharpnessLabel.setMinimumSize(QtCore.QSize(65, 30))
        self.sharpnessLabel.setMaximumSize(QtCore.QSize(65, 30))
        self.sharpnessLabel.setToolTip("Values between 0.0 and 16.0.\n"
"Camera default: 1.0.\n"
"Movies with a lot of grain\n"
"improve with low values of\n"
"sharpness.")
        self.sharpnessLabel.setStatusTip("")
        self.sharpnessLabel.setWhatsThis("")
        self.sharpnessLabel.setAccessibleName("")
        self.sharpnessLabel.setAccessibleDescription("")
        self.sharpnessLabel.setText("Sharpness")
        self.sharpnessLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.sharpnessLabel.setObjectName("sharpnessLabel")
        self.horizontalLayout_15.addWidget(self.sharpnessLabel)
        self.sharpnessBox = QtWidgets.QDoubleSpinBox(parent=self.tab_adv)
        self.sharpnessBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sharpnessBox.sizePolicy().hasHeightForWidth())
        self.sharpnessBox.setSizePolicy(sizePolicy)
        self.sharpnessBox.setMinimumSize(QtCore.QSize(60, 30))
        self.sharpnessBox.setMaximumSize(QtCore.QSize(60, 30))
        self.sharpnessBox.setToolTip("Values between 0.0 and 16.0.\n"
"Camera default: 1.0.\n"
"Movies with a lot of grain\n"
"improve with low values of\n"
"sharpness.")
        self.sharpnessBox.setStatusTip("")
        self.sharpnessBox.setWhatsThis("")
        self.sharpnessBox.setAccessibleName("")
        self.sharpnessBox.setAccessibleDescription("")
        self.sharpnessBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.sharpnessBox.setSpecialValueText("")
        self.sharpnessBox.setDecimals(1)
        self.sharpnessBox.setMaximum(16.0)
        self.sharpnessBox.setSingleStep(0.1)
        self.sharpnessBox.setProperty("value", 1.0)
        self.sharpnessBox.setObjectName("sharpnessBox")
        self.horizontalLayout_15.addWidget(self.sharpnessBox)
        self.verticalLayout_14.addLayout(self.horizontalLayout_15)
        self.DS8tabWidget.addTab(self.tab_adv, "Advanced")
        self.DS8tabWidget.setTabToolTip(self.DS8tabWidget.indexOf(self.tab_adv), "Advanced settings:\n"
"- Image flip.\n"
"- B/W image.\n"
"- Auto exposure restriction.\n"
"- Auto exposure mode.\n"
"- Metering mode.\n"
"- Capture resolution.\n"
"- Sharpness.")
        self.tab_post = QtWidgets.QWidget()
        self.tab_post.setObjectName("tab_post")
        self.verticalLayout_28 = QtWidgets.QVBoxLayout(self.tab_post)
        self.verticalLayout_28.setObjectName("verticalLayout_28")
        self.PostCapGroupBox = QtWidgets.QGroupBox(parent=self.tab_post)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PostCapGroupBox.sizePolicy().hasHeightForWidth())
        self.PostCapGroupBox.setSizePolicy(sizePolicy)
        self.PostCapGroupBox.setMinimumSize(QtCore.QSize(364, 364))
        self.PostCapGroupBox.setMaximumSize(QtCore.QSize(364, 364))
        self.PostCapGroupBox.setToolTip("Post-capture operations:\n"
"- Histogram.\n"
"- Sharpness index.\n"
"- Rounding of corners.\n"
"- Image rotation.\n"
"- Image cropping.\n"
"- Image size.")
        self.PostCapGroupBox.setStatusTip("")
        self.PostCapGroupBox.setWhatsThis("")
        self.PostCapGroupBox.setAccessibleName("")
        self.PostCapGroupBox.setAccessibleDescription("")
        self.PostCapGroupBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.PostCapGroupBox.setObjectName("PostCapGroupBox")
        self.verticalLayout_16 = QtWidgets.QVBoxLayout(self.PostCapGroupBox)
        self.verticalLayout_16.setObjectName("verticalLayout_16")
        self.horizontalLayout_38 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_38.setObjectName("horizontalLayout_38")
        self.showHist = QtWidgets.QCheckBox(parent=self.PostCapGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.showHist.sizePolicy().hasHeightForWidth())
        self.showHist.setSizePolicy(sizePolicy)
        self.showHist.setMinimumSize(QtCore.QSize(120, 30))
        self.showHist.setMaximumSize(QtCore.QSize(120, 30))
        self.showHist.setToolTip("Calculating and displaying the histogram\n"
"of the current frame.")
        self.showHist.setStatusTip("")
        self.showHist.setWhatsThis("")
        self.showHist.setAccessibleName("")
        self.showHist.setAccessibleDescription("")
        self.showHist.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.showHist.setText("Show histogram")
        self.showHist.setChecked(True)
        self.showHist.setObjectName("showHist")
        self.horizontalLayout_38.addWidget(self.showHist)
        spacerItem34 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_38.addItem(spacerItem34)
        self.logarithmHist = QtWidgets.QCheckBox(parent=self.PostCapGroupBox)
        self.logarithmHist.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.logarithmHist.sizePolicy().hasHeightForWidth())
        self.logarithmHist.setSizePolicy(sizePolicy)
        self.logarithmHist.setMinimumSize(QtCore.QSize(110, 30))
        self.logarithmHist.setMaximumSize(QtCore.QSize(110, 30))
        self.logarithmHist.setToolTip("Make Y axis of histogram with\n"
"logarithmic scale.")
        self.logarithmHist.setStatusTip("")
        self.logarithmHist.setWhatsThis("")
        self.logarithmHist.setAccessibleName("")
        self.logarithmHist.setAccessibleDescription("")
        self.logarithmHist.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.logarithmHist.setObjectName("logarithmHist")
        self.horizontalLayout_38.addWidget(self.logarithmHist)
        self.verticalLayout_16.addLayout(self.horizontalLayout_38)
        spacerItem35 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_16.addItem(spacerItem35)
        self.horizontalLayout_14 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_14.setObjectName("horizontalLayout_14")
        self.sharpCheckBox = QtWidgets.QCheckBox(parent=self.PostCapGroupBox)
        self.sharpCheckBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sharpCheckBox.sizePolicy().hasHeightForWidth())
        self.sharpCheckBox.setSizePolicy(sizePolicy)
        self.sharpCheckBox.setMinimumSize(QtCore.QSize(156, 30))
        self.sharpCheckBox.setMaximumSize(QtCore.QSize(156, 30))
        self.sharpCheckBox.setToolTip("Show sharpness index in preview images.\n"
"Helps to get the focus right.\n"
"Higher values correspond to sharper images.\n"
"Adjust focus to the maximum possible value.")
        self.sharpCheckBox.setStatusTip("")
        self.sharpCheckBox.setWhatsThis("")
        self.sharpCheckBox.setAccessibleName("")
        self.sharpCheckBox.setAccessibleDescription("")
        self.sharpCheckBox.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.sharpCheckBox.setText("Show sharpness index")
        self.sharpCheckBox.setChecked(True)
        self.sharpCheckBox.setObjectName("sharpCheckBox")
        self.horizontalLayout_14.addWidget(self.sharpCheckBox)
        spacerItem36 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_14.addItem(spacerItem36)
        self.roundCorns = QtWidgets.QCheckBox(parent=self.PostCapGroupBox)
        self.roundCorns.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.roundCorns.sizePolicy().hasHeightForWidth())
        self.roundCorns.setSizePolicy(sizePolicy)
        self.roundCorns.setMinimumSize(QtCore.QSize(144, 30))
        self.roundCorns.setMaximumSize(QtCore.QSize(144, 30))
        self.roundCorns.setToolTip("Rounding the corners of the frame.")
        self.roundCorns.setStatusTip("")
        self.roundCorns.setWhatsThis("")
        self.roundCorns.setAccessibleName("")
        self.roundCorns.setAccessibleDescription("")
        self.roundCorns.setLayoutDirection(QtCore.Qt.LayoutDirection.RightToLeft)
        self.roundCorns.setText("Rounded corners")
        self.roundCorns.setObjectName("roundCorns")
        self.horizontalLayout_14.addWidget(self.roundCorns)
        self.verticalLayout_16.addLayout(self.horizontalLayout_14)
        spacerItem37 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_16.addItem(spacerItem37)
        self.horizontalLayout_41 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_41.setObjectName("horizontalLayout_41")
        self.rotationCheckBox = QtWidgets.QCheckBox(parent=self.PostCapGroupBox)
        self.rotationCheckBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rotationCheckBox.sizePolicy().hasHeightForWidth())
        self.rotationCheckBox.setSizePolicy(sizePolicy)
        self.rotationCheckBox.setMinimumSize(QtCore.QSize(60, 30))
        self.rotationCheckBox.setMaximumSize(QtCore.QSize(60, 30))
        self.rotationCheckBox.setToolTip("Rotating the frame image.")
        self.rotationCheckBox.setStatusTip("")
        self.rotationCheckBox.setWhatsThis("")
        self.rotationCheckBox.setAccessibleName("")
        self.rotationCheckBox.setAccessibleDescription("")
        self.rotationCheckBox.setText("Rotate")
        self.rotationCheckBox.setObjectName("rotationCheckBox")
        self.horizontalLayout_41.addWidget(self.rotationCheckBox)
        self.rotationBox = QtWidgets.QDoubleSpinBox(parent=self.PostCapGroupBox)
        self.rotationBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.rotationBox.sizePolicy().hasHeightForWidth())
        self.rotationBox.setSizePolicy(sizePolicy)
        self.rotationBox.setMinimumSize(QtCore.QSize(75, 30))
        self.rotationBox.setMaximumSize(QtCore.QSize(75, 30))
        self.rotationBox.setToolTip("Required angle of rotation")
        self.rotationBox.setStatusTip("")
        self.rotationBox.setWhatsThis("")
        self.rotationBox.setAccessibleName("")
        self.rotationBox.setAccessibleDescription("")
        self.rotationBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.rotationBox.setSpecialValueText("")
        self.rotationBox.setMinimum(-100.0)
        self.rotationBox.setMaximum(100.0)
        self.rotationBox.setSingleStep(0.1)
        self.rotationBox.setObjectName("rotationBox")
        self.horizontalLayout_41.addWidget(self.rotationBox)
        spacerItem38 = QtWidgets.QSpacerItem(13, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_41.addItem(spacerItem38)
        self.verticalLayout_16.addLayout(self.horizontalLayout_41)
        spacerItem39 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_16.addItem(spacerItem39)
        self.horizontalLayout_46 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_46.setObjectName("horizontalLayout_46")
        spacerItem40 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_46.addItem(spacerItem40)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        spacerItem41 = QtWidgets.QSpacerItem(100, 30, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem41, 2, 2, 1, 1)
        spacerItem42 = QtWidgets.QSpacerItem(100, 30, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem42, 0, 2, 1, 1)
        spacerItem43 = QtWidgets.QSpacerItem(100, 30, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem43, 1, 1, 1, 1)
        self.horizontalLayout_43 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_43.setObjectName("horizontalLayout_43")
        self.cropBottomLabel = QtWidgets.QLabel(parent=self.PostCapGroupBox)
        self.cropBottomLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cropBottomLabel.sizePolicy().hasHeightForWidth())
        self.cropBottomLabel.setSizePolicy(sizePolicy)
        self.cropBottomLabel.setMinimumSize(QtCore.QSize(45, 30))
        self.cropBottomLabel.setMaximumSize(QtCore.QSize(45, 30))
        self.cropBottomLabel.setToolTip("Width in pixels of the bottom strip to\n"
"be removed from the image.")
        self.cropBottomLabel.setStatusTip("")
        self.cropBottomLabel.setWhatsThis("")
        self.cropBottomLabel.setAccessibleName("")
        self.cropBottomLabel.setAccessibleDescription("")
        self.cropBottomLabel.setText("Bottom")
        self.cropBottomLabel.setObjectName("cropBottomLabel")
        self.horizontalLayout_43.addWidget(self.cropBottomLabel)
        self.cropBottomBox = QtWidgets.QSpinBox(parent=self.PostCapGroupBox)
        self.cropBottomBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cropBottomBox.sizePolicy().hasHeightForWidth())
        self.cropBottomBox.setSizePolicy(sizePolicy)
        self.cropBottomBox.setMinimumSize(QtCore.QSize(75, 30))
        self.cropBottomBox.setMaximumSize(QtCore.QSize(75, 30))
        self.cropBottomBox.setToolTip("Width in pixels of the bottom strip to\n"
"be removed from the image.")
        self.cropBottomBox.setStatusTip("")
        self.cropBottomBox.setWhatsThis("")
        self.cropBottomBox.setAccessibleName("")
        self.cropBottomBox.setAccessibleDescription("")
        self.cropBottomBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.cropBottomBox.setSpecialValueText("")
        self.cropBottomBox.setMaximum(1999)
        self.cropBottomBox.setObjectName("cropBottomBox")
        self.horizontalLayout_43.addWidget(self.cropBottomBox)
        self.gridLayout.addLayout(self.horizontalLayout_43, 2, 1, 1, 1)
        self.horizontalLayout_42 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_42.setObjectName("horizontalLayout_42")
        self.cropTopLabel = QtWidgets.QLabel(parent=self.PostCapGroupBox)
        self.cropTopLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cropTopLabel.sizePolicy().hasHeightForWidth())
        self.cropTopLabel.setSizePolicy(sizePolicy)
        self.cropTopLabel.setMinimumSize(QtCore.QSize(45, 30))
        self.cropTopLabel.setMaximumSize(QtCore.QSize(45, 30))
        self.cropTopLabel.setToolTip("Width in pixels of the upper strip to\n"
"be removed from the image.")
        self.cropTopLabel.setStatusTip("")
        self.cropTopLabel.setWhatsThis("")
        self.cropTopLabel.setAccessibleName("")
        self.cropTopLabel.setAccessibleDescription("")
        self.cropTopLabel.setText("Top")
        self.cropTopLabel.setObjectName("cropTopLabel")
        self.horizontalLayout_42.addWidget(self.cropTopLabel)
        self.cropTopBox = QtWidgets.QSpinBox(parent=self.PostCapGroupBox)
        self.cropTopBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cropTopBox.sizePolicy().hasHeightForWidth())
        self.cropTopBox.setSizePolicy(sizePolicy)
        self.cropTopBox.setMinimumSize(QtCore.QSize(75, 30))
        self.cropTopBox.setMaximumSize(QtCore.QSize(75, 30))
        self.cropTopBox.setToolTip("Width in pixels of the upper strip to\n"
"be removed from the image.")
        self.cropTopBox.setStatusTip("")
        self.cropTopBox.setWhatsThis("")
        self.cropTopBox.setAccessibleName("")
        self.cropTopBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.cropTopBox.setSpecialValueText("")
        self.cropTopBox.setMaximum(1999)
        self.cropTopBox.setObjectName("cropTopBox")
        self.horizontalLayout_42.addWidget(self.cropTopBox)
        self.gridLayout.addLayout(self.horizontalLayout_42, 0, 1, 1, 1)
        self.horizontalLayout_44 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_44.setObjectName("horizontalLayout_44")
        self.cropLeftLabel = QtWidgets.QLabel(parent=self.PostCapGroupBox)
        self.cropLeftLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cropLeftLabel.sizePolicy().hasHeightForWidth())
        self.cropLeftLabel.setSizePolicy(sizePolicy)
        self.cropLeftLabel.setMinimumSize(QtCore.QSize(30, 30))
        self.cropLeftLabel.setMaximumSize(QtCore.QSize(30, 30))
        self.cropLeftLabel.setToolTip("Width in pixels of the left strip to\n"
"be removed from the image.")
        self.cropLeftLabel.setStatusTip("")
        self.cropLeftLabel.setWhatsThis("")
        self.cropLeftLabel.setAccessibleName("")
        self.cropLeftLabel.setAccessibleDescription("")
        self.cropLeftLabel.setText("Left")
        self.cropLeftLabel.setObjectName("cropLeftLabel")
        self.horizontalLayout_44.addWidget(self.cropLeftLabel)
        self.cropLeftBox = QtWidgets.QSpinBox(parent=self.PostCapGroupBox)
        self.cropLeftBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cropLeftBox.sizePolicy().hasHeightForWidth())
        self.cropLeftBox.setSizePolicy(sizePolicy)
        self.cropLeftBox.setMinimumSize(QtCore.QSize(75, 30))
        self.cropLeftBox.setMaximumSize(QtCore.QSize(75, 30))
        self.cropLeftBox.setToolTip("Width in pixels of the left strip to\n"
"be removed from the image.")
        self.cropLeftBox.setStatusTip("")
        self.cropLeftBox.setWhatsThis("")
        self.cropLeftBox.setAccessibleName("")
        self.cropLeftBox.setAccessibleDescription("")
        self.cropLeftBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.cropLeftBox.setSpecialValueText("")
        self.cropLeftBox.setPrefix("")
        self.cropLeftBox.setMaximum(1999)
        self.cropLeftBox.setObjectName("cropLeftBox")
        self.horizontalLayout_44.addWidget(self.cropLeftBox)
        self.gridLayout.addLayout(self.horizontalLayout_44, 1, 0, 1, 1)
        self.horizontalLayout_45 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_45.setObjectName("horizontalLayout_45")
        self.cropRightLabel = QtWidgets.QLabel(parent=self.PostCapGroupBox)
        self.cropRightLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cropRightLabel.sizePolicy().hasHeightForWidth())
        self.cropRightLabel.setSizePolicy(sizePolicy)
        self.cropRightLabel.setMinimumSize(QtCore.QSize(32, 30))
        self.cropRightLabel.setMaximumSize(QtCore.QSize(32, 30))
        self.cropRightLabel.setToolTip("Anchura en píxels de la franja derecha\n"
"a eliminar de la imagen.")
        self.cropRightLabel.setStatusTip("")
        self.cropRightLabel.setWhatsThis("")
        self.cropRightLabel.setAccessibleName("")
        self.cropRightLabel.setAccessibleDescription("")
        self.cropRightLabel.setObjectName("cropRightLabel")
        self.horizontalLayout_45.addWidget(self.cropRightLabel)
        self.cropRightBox = QtWidgets.QSpinBox(parent=self.PostCapGroupBox)
        self.cropRightBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cropRightBox.sizePolicy().hasHeightForWidth())
        self.cropRightBox.setSizePolicy(sizePolicy)
        self.cropRightBox.setMinimumSize(QtCore.QSize(75, 30))
        self.cropRightBox.setMaximumSize(QtCore.QSize(75, 30))
        self.cropRightBox.setToolTip("Anchura en píxels de la franja derecha\n"
"a eliminar de la imagen.")
        self.cropRightBox.setStatusTip("")
        self.cropRightBox.setWhatsThis("")
        self.cropRightBox.setAccessibleName("")
        self.cropRightBox.setAccessibleDescription("")
        self.cropRightBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.cropRightBox.setSpecialValueText("")
        self.cropRightBox.setPrefix("")
        self.cropRightBox.setMaximum(1999)
        self.cropRightBox.setObjectName("cropRightBox")
        self.horizontalLayout_45.addWidget(self.cropRightBox)
        self.gridLayout.addLayout(self.horizontalLayout_45, 1, 2, 1, 1)
        self.croppingCheckBox = QtWidgets.QCheckBox(parent=self.PostCapGroupBox)
        self.croppingCheckBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.croppingCheckBox.sizePolicy().hasHeightForWidth())
        self.croppingCheckBox.setSizePolicy(sizePolicy)
        self.croppingCheckBox.setMinimumSize(QtCore.QSize(100, 30))
        self.croppingCheckBox.setMaximumSize(QtCore.QSize(100, 30))
        self.croppingCheckBox.setToolTip("Crop the frame of the image to\n"
"remove unwanted edges.")
        self.croppingCheckBox.setStatusTip("")
        self.croppingCheckBox.setWhatsThis("")
        self.croppingCheckBox.setAccessibleName("")
        self.croppingCheckBox.setAccessibleDescription("")
        self.croppingCheckBox.setText("Trim")
        self.croppingCheckBox.setObjectName("croppingCheckBox")
        self.gridLayout.addWidget(self.croppingCheckBox, 0, 0, 1, 1)
        spacerItem44 = QtWidgets.QSpacerItem(100, 30, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.gridLayout.addItem(spacerItem44, 2, 0, 1, 1)
        self.horizontalLayout_46.addLayout(self.gridLayout)
        spacerItem45 = QtWidgets.QSpacerItem(10, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_46.addItem(spacerItem45)
        self.verticalLayout_16.addLayout(self.horizontalLayout_46)
        spacerItem46 = QtWidgets.QSpacerItem(20, 5, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_16.addItem(spacerItem46)
        self.horizontalLayout_54 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_54.setObjectName("horizontalLayout_54")
        self.frame = QtWidgets.QFrame(parent=self.PostCapGroupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.frame.sizePolicy().hasHeightForWidth())
        self.frame.setSizePolicy(sizePolicy)
        self.frame.setMinimumSize(QtCore.QSize(240, 80))
        self.frame.setMaximumSize(QtCore.QSize(240, 80))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Raised)
        self.frame.setObjectName("frame")
        self.verticalLayout_12 = QtWidgets.QVBoxLayout(self.frame)
        self.verticalLayout_12.setObjectName("verticalLayout_12")
        self.sizeLabel = QtWidgets.QLabel(parent=self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizeLabel.sizePolicy().hasHeightForWidth())
        self.sizeLabel.setSizePolicy(sizePolicy)
        self.sizeLabel.setMinimumSize(QtCore.QSize(200, 16))
        self.sizeLabel.setToolTip("")
        self.sizeLabel.setStatusTip("")
        self.sizeLabel.setWhatsThis("")
        self.sizeLabel.setAccessibleName("")
        self.sizeLabel.setAccessibleDescription("")
        self.sizeLabel.setText("Image size (WxH pixels):")
        self.sizeLabel.setObjectName("sizeLabel")
        self.verticalLayout_12.addWidget(self.sizeLabel)
        self.sizeImgCapLabel = QtWidgets.QLabel(parent=self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizeImgCapLabel.sizePolicy().hasHeightForWidth())
        self.sizeImgCapLabel.setSizePolicy(sizePolicy)
        self.sizeImgCapLabel.setMinimumSize(QtCore.QSize(200, 16))
        self.sizeImgCapLabel.setMaximumSize(QtCore.QSize(200, 16))
        self.sizeImgCapLabel.setToolTip("Displays the size of the image captured\n"
"by the camera taking into account the\n"
"zoom setting and the cropping made.")
        self.sizeImgCapLabel.setStatusTip("")
        self.sizeImgCapLabel.setWhatsThis("")
        self.sizeImgCapLabel.setAccessibleName("")
        self.sizeImgCapLabel.setAccessibleDescription("")
        self.sizeImgCapLabel.setText("Captured:")
        self.sizeImgCapLabel.setObjectName("sizeImgCapLabel")
        self.verticalLayout_12.addWidget(self.sizeImgCapLabel)
        self.sizeImgFinalLabel = QtWidgets.QLabel(parent=self.frame)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sizeImgFinalLabel.sizePolicy().hasHeightForWidth())
        self.sizeImgFinalLabel.setSizePolicy(sizePolicy)
        self.sizeImgFinalLabel.setMinimumSize(QtCore.QSize(200, 16))
        self.sizeImgFinalLabel.setMaximumSize(QtCore.QSize(200, 16))
        self.sizeImgFinalLabel.setToolTip("Displays the size of the final image after rescaling.\n"
"Important: the width of the resulting image must\n"
"be divisible by 2, otherwise it will not be possible\n"
"to make a video file with the captured images.")
        self.sizeImgFinalLabel.setStatusTip("")
        self.sizeImgFinalLabel.setWhatsThis("")
        self.sizeImgFinalLabel.setAccessibleName("")
        self.sizeImgFinalLabel.setAccessibleDescription("")
        self.sizeImgFinalLabel.setText("Final:")
        self.sizeImgFinalLabel.setObjectName("sizeImgFinalLabel")
        self.verticalLayout_12.addWidget(self.sizeImgFinalLabel)
        self.horizontalLayout_54.addWidget(self.frame)
        self.verticalLayout_16.addLayout(self.horizontalLayout_54)
        self.verticalLayout_28.addWidget(self.PostCapGroupBox)
        self.DS8tabWidget.addTab(self.tab_post, "Post-Capture")
        self.DS8tabWidget.setTabToolTip(self.DS8tabWidget.indexOf(self.tab_post), "Post-capture operations:\n"
"- Histogram.\n"
"- Sharpness index.\n"
"- Rounding of corners.\n"
"- Image rotation.\n"
"- Image cropping.\n"
"- Image size.")
        self.tab_hdr = QtWidgets.QWidget()
        self.tab_hdr.setObjectName("tab_hdr")
        self.verticalLayout_33 = QtWidgets.QVBoxLayout(self.tab_hdr)
        self.verticalLayout_33.setObjectName("verticalLayout_33")
        self.HDRgroupBox = QtWidgets.QGroupBox(parent=self.tab_hdr)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.HDRgroupBox.sizePolicy().hasHeightForWidth())
        self.HDRgroupBox.setSizePolicy(sizePolicy)
        self.HDRgroupBox.setMinimumSize(QtCore.QSize(364, 90))
        self.HDRgroupBox.setMaximumSize(QtCore.QSize(364, 90))
        self.HDRgroupBox.setToolTip("Selecting the HDR algorithm to use.")
        self.HDRgroupBox.setStatusTip("")
        self.HDRgroupBox.setWhatsThis("")
        self.HDRgroupBox.setAccessibleName("")
        self.HDRgroupBox.setAccessibleDescription("")
        self.HDRgroupBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.HDRgroupBox.setObjectName("HDRgroupBox")
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout(self.HDRgroupBox)
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.verticalLayout_15 = QtWidgets.QVBoxLayout()
        self.verticalLayout_15.setObjectName("verticalLayout_15")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.PHighLabel = QtWidgets.QLabel(parent=self.HDRgroupBox)
        self.PHighLabel.setEnabled(False)
        self.PHighLabel.setMinimumSize(QtCore.QSize(50, 25))
        self.PHighLabel.setMaximumSize(QtCore.QSize(50, 25))
        self.PHighLabel.setToolTip("Determines the percentile\n"
"of maximum brightness to\n"
"use in the Mertens algorithm.\n"
"Pixels of higher brightness are\n"
"ignored.\n"
"Values between 88 and 100 %.")
        self.PHighLabel.setStatusTip("")
        self.PHighLabel.setWhatsThis("")
        self.PHighLabel.setAccessibleName("")
        self.PHighLabel.setAccessibleDescription("")
        self.PHighLabel.setText("P. High")
        self.PHighLabel.setObjectName("PHighLabel")
        self.horizontalLayout_8.addWidget(self.PHighLabel)
        self.PHighSpinBox = QtWidgets.QDoubleSpinBox(parent=self.HDRgroupBox)
        self.PHighSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PHighSpinBox.sizePolicy().hasHeightForWidth())
        self.PHighSpinBox.setSizePolicy(sizePolicy)
        self.PHighSpinBox.setMinimumSize(QtCore.QSize(75, 25))
        self.PHighSpinBox.setMaximumSize(QtCore.QSize(75, 25))
        self.PHighSpinBox.setToolTip("Determines the percentile\n"
"of maximum brightness to\n"
"use in the Mertens algorithm.\n"
"Pixels of higher brightness are\n"
"ignored.\n"
"Values between 88 and 100 %.")
        self.PHighSpinBox.setStatusTip("")
        self.PHighSpinBox.setWhatsThis("")
        self.PHighSpinBox.setAccessibleName("")
        self.PHighSpinBox.setAccessibleDescription("")
        self.PHighSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.PHighSpinBox.setSpecialValueText("")
        self.PHighSpinBox.setDecimals(1)
        self.PHighSpinBox.setMinimum(88.0)
        self.PHighSpinBox.setSingleStep(0.1)
        self.PHighSpinBox.setProperty("value", 100.0)
        self.PHighSpinBox.setObjectName("PHighSpinBox")
        self.horizontalLayout_8.addWidget(self.PHighSpinBox)
        self.verticalLayout_15.addLayout(self.horizontalLayout_8)
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.PLowLabel = QtWidgets.QLabel(parent=self.HDRgroupBox)
        self.PLowLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PLowLabel.sizePolicy().hasHeightForWidth())
        self.PLowLabel.setSizePolicy(sizePolicy)
        self.PLowLabel.setMinimumSize(QtCore.QSize(50, 25))
        self.PLowLabel.setMaximumSize(QtCore.QSize(50, 25))
        self.PLowLabel.setToolTip("Determines the percentile\n"
"of minimum brightness to\n"
"use in the Mertens algorithm.\n"
"Pixels of lower brightness are\n"
"ignored.\n"
"Values between 0 and 12 %.")
        self.PLowLabel.setStatusTip("")
        self.PLowLabel.setWhatsThis("")
        self.PLowLabel.setAccessibleName("")
        self.PLowLabel.setAccessibleDescription("")
        self.PLowLabel.setText("P. Low")
        self.PLowLabel.setObjectName("PLowLabel")
        self.horizontalLayout_10.addWidget(self.PLowLabel)
        self.PLowSpinBox = QtWidgets.QDoubleSpinBox(parent=self.HDRgroupBox)
        self.PLowSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.PLowSpinBox.sizePolicy().hasHeightForWidth())
        self.PLowSpinBox.setSizePolicy(sizePolicy)
        self.PLowSpinBox.setMinimumSize(QtCore.QSize(75, 25))
        self.PLowSpinBox.setMaximumSize(QtCore.QSize(71, 25))
        self.PLowSpinBox.setToolTip("Determines the percentile\n"
"of minimum brightness to\n"
"use in the Mertens algorithm.\n"
"Pixels of lower brightness are\n"
"ignored.\n"
"Values between 0 and 12 %.")
        self.PLowSpinBox.setStatusTip("")
        self.PLowSpinBox.setWhatsThis("")
        self.PLowSpinBox.setAccessibleName("")
        self.PLowSpinBox.setAccessibleDescription("")
        self.PLowSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.PLowSpinBox.setSpecialValueText("")
        self.PLowSpinBox.setPrefix("")
        self.PLowSpinBox.setDecimals(1)
        self.PLowSpinBox.setMaximum(12.0)
        self.PLowSpinBox.setSingleStep(0.1)
        self.PLowSpinBox.setObjectName("PLowSpinBox")
        self.horizontalLayout_10.addWidget(self.PLowSpinBox)
        self.verticalLayout_15.addLayout(self.horizontalLayout_10)
        self.horizontalLayout_11.addLayout(self.verticalLayout_15)
        self.HDRMertensRadioButton = QtWidgets.QRadioButton(parent=self.HDRgroupBox)
        self.HDRMertensRadioButton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.HDRMertensRadioButton.sizePolicy().hasHeightForWidth())
        self.HDRMertensRadioButton.setSizePolicy(sizePolicy)
        self.HDRMertensRadioButton.setMinimumSize(QtCore.QSize(70, 30))
        self.HDRMertensRadioButton.setMaximumSize(QtCore.QSize(70, 30))
        self.HDRMertensRadioButton.setToolTip("Use image blending by the Mertens algorithm.\n"
"Has the advantage of simplicity, no tone mapping\n"
"is required.")
        self.HDRMertensRadioButton.setStatusTip("")
        self.HDRMertensRadioButton.setWhatsThis("")
        self.HDRMertensRadioButton.setAccessibleName("")
        self.HDRMertensRadioButton.setAccessibleDescription("")
        self.HDRMertensRadioButton.setText("&Mertens")
        self.HDRMertensRadioButton.setChecked(True)
        self.HDRMertensRadioButton.setObjectName("HDRMertensRadioButton")
        self.horizontalLayout_11.addWidget(self.HDRMertensRadioButton)
        self.line_4 = QtWidgets.QFrame(parent=self.HDRgroupBox)
        self.line_4.setFrameShape(QtWidgets.QFrame.Shape.VLine)
        self.line_4.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_4.setObjectName("line_4")
        self.horizontalLayout_11.addWidget(self.line_4)
        self.HDRDebevecRadioButton = QtWidgets.QRadioButton(parent=self.HDRgroupBox)
        self.HDRDebevecRadioButton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.HDRDebevecRadioButton.sizePolicy().hasHeightForWidth())
        self.HDRDebevecRadioButton.setSizePolicy(sizePolicy)
        self.HDRDebevecRadioButton.setMinimumSize(QtCore.QSize(76, 30))
        self.HDRDebevecRadioButton.setMaximumSize(QtCore.QSize(76, 30))
        self.HDRDebevecRadioButton.setToolTip("Use HDR Debevec algorithm.\n"
"In tests carried out, it has been found\n"
"that, to obtain good results, it is\n"
"necessary to take enough images.\n"
"Minimum 6 images.\n"
"It is necessary to choose a tone mapping\n"
"algorithm. Recommended Reinhard.")
        self.HDRDebevecRadioButton.setStatusTip("")
        self.HDRDebevecRadioButton.setWhatsThis("")
        self.HDRDebevecRadioButton.setAccessibleName("")
        self.HDRDebevecRadioButton.setAccessibleDescription("")
        self.HDRDebevecRadioButton.setText("&Debevec")
        self.HDRDebevecRadioButton.setChecked(False)
        self.HDRDebevecRadioButton.setObjectName("HDRDebevecRadioButton")
        self.horizontalLayout_11.addWidget(self.HDRDebevecRadioButton)
        self.verticalLayout_33.addWidget(self.HDRgroupBox)
        self.toneMapGroupBox = QtWidgets.QGroupBox(parent=self.tab_hdr)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.toneMapGroupBox.sizePolicy().hasHeightForWidth())
        self.toneMapGroupBox.setSizePolicy(sizePolicy)
        self.toneMapGroupBox.setMinimumSize(QtCore.QSize(364, 284))
        self.toneMapGroupBox.setMaximumSize(QtCore.QSize(364, 284))
        self.toneMapGroupBox.setToolTip("Selecting the tone mapping algorithm to use.")
        self.toneMapGroupBox.setStatusTip("")
        self.toneMapGroupBox.setWhatsThis("")
        self.toneMapGroupBox.setAccessibleName("")
        self.toneMapGroupBox.setAccessibleDescription("")
        self.toneMapGroupBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.toneMapGroupBox.setObjectName("toneMapGroupBox")
        self.verticalLayout_32 = QtWidgets.QVBoxLayout(self.toneMapGroupBox)
        self.verticalLayout_32.setObjectName("verticalLayout_32")
        self.horizontalLayout_37 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_37.setObjectName("horizontalLayout_37")
        self.SimpleRadioButton = QtWidgets.QRadioButton(parent=self.toneMapGroupBox)
        self.SimpleRadioButton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SimpleRadioButton.sizePolicy().hasHeightForWidth())
        self.SimpleRadioButton.setSizePolicy(sizePolicy)
        self.SimpleRadioButton.setMinimumSize(QtCore.QSize(90, 22))
        self.SimpleRadioButton.setMaximumSize(QtCore.QSize(90, 22))
        self.SimpleRadioButton.setToolTip("Simple linear tone mapping with gamma\n"
"correction is performed.")
        self.SimpleRadioButton.setStatusTip("")
        self.SimpleRadioButton.setWhatsThis("")
        self.SimpleRadioButton.setAccessibleName("")
        self.SimpleRadioButton.setAccessibleDescription("")
        self.SimpleRadioButton.setText("&Simple")
        self.SimpleRadioButton.setChecked(True)
        self.SimpleRadioButton.setObjectName("SimpleRadioButton")
        self.horizontalLayout_37.addWidget(self.SimpleRadioButton)
        spacerItem47 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_37.addItem(spacerItem47)
        self.SimpleGammaLabel = QtWidgets.QLabel(parent=self.toneMapGroupBox)
        self.SimpleGammaLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SimpleGammaLabel.sizePolicy().hasHeightForWidth())
        self.SimpleGammaLabel.setSizePolicy(sizePolicy)
        self.SimpleGammaLabel.setMinimumSize(QtCore.QSize(50, 25))
        self.SimpleGammaLabel.setMaximumSize(QtCore.QSize(50, 25))
        self.SimpleGammaLabel.setToolTip("Gamma correction parameter.\n"
"For gamma = 1 no correction is applied.\n"
"Values less than 1 darken the image.\n"
"Values greater than 1 increase the brightness\n"
"of the image.")
        self.SimpleGammaLabel.setStatusTip("")
        self.SimpleGammaLabel.setWhatsThis("")
        self.SimpleGammaLabel.setAccessibleName("")
        self.SimpleGammaLabel.setAccessibleDescription("")
        self.SimpleGammaLabel.setText("Gamma")
        self.SimpleGammaLabel.setObjectName("SimpleGammaLabel")
        self.horizontalLayout_37.addWidget(self.SimpleGammaLabel)
        self.SimpleGammaSpinBox = QtWidgets.QDoubleSpinBox(parent=self.toneMapGroupBox)
        self.SimpleGammaSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.SimpleGammaSpinBox.sizePolicy().hasHeightForWidth())
        self.SimpleGammaSpinBox.setSizePolicy(sizePolicy)
        self.SimpleGammaSpinBox.setMinimumSize(QtCore.QSize(50, 25))
        self.SimpleGammaSpinBox.setMaximumSize(QtCore.QSize(50, 25))
        self.SimpleGammaSpinBox.setToolTip("Gamma correction parameter.\n"
"For gamma = 1 no correction is applied.\n"
"Values less than 1 darken the image.\n"
"Values greater than 1 increase the brightness\n"
"of the image.")
        self.SimpleGammaSpinBox.setStatusTip("")
        self.SimpleGammaSpinBox.setWhatsThis("")
        self.SimpleGammaSpinBox.setAccessibleName("")
        self.SimpleGammaSpinBox.setAccessibleDescription("")
        self.SimpleGammaSpinBox.setFrame(True)
        self.SimpleGammaSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.SimpleGammaSpinBox.setSpecialValueText("")
        self.SimpleGammaSpinBox.setDecimals(1)
        self.SimpleGammaSpinBox.setMinimum(0.0)
        self.SimpleGammaSpinBox.setMaximum(3.0)
        self.SimpleGammaSpinBox.setSingleStep(0.1)
        self.SimpleGammaSpinBox.setProperty("value", 1.0)
        self.SimpleGammaSpinBox.setObjectName("SimpleGammaSpinBox")
        self.horizontalLayout_37.addWidget(self.SimpleGammaSpinBox)
        spacerItem48 = QtWidgets.QSpacerItem(127, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_37.addItem(spacerItem48)
        self.verticalLayout_32.addLayout(self.horizontalLayout_37)
        self.line_3 = QtWidgets.QFrame(parent=self.toneMapGroupBox)
        self.line_3.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_3.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_3.setObjectName("line_3")
        self.verticalLayout_32.addWidget(self.line_3)
        self.horizontalLayout_57 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_57.setObjectName("horizontalLayout_57")
        self.ReinhardRadioButton = QtWidgets.QRadioButton(parent=self.toneMapGroupBox)
        self.ReinhardRadioButton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ReinhardRadioButton.sizePolicy().hasHeightForWidth())
        self.ReinhardRadioButton.setSizePolicy(sizePolicy)
        self.ReinhardRadioButton.setMinimumSize(QtCore.QSize(90, 22))
        self.ReinhardRadioButton.setMaximumSize(QtCore.QSize(90, 22))
        self.ReinhardRadioButton.setToolTip("Use Reinhard algorithm for tone mapping.")
        self.ReinhardRadioButton.setStatusTip("")
        self.ReinhardRadioButton.setWhatsThis("")
        self.ReinhardRadioButton.setAccessibleName("")
        self.ReinhardRadioButton.setAccessibleDescription("")
        self.ReinhardRadioButton.setText("&Reinhard")
        self.ReinhardRadioButton.setChecked(False)
        self.ReinhardRadioButton.setObjectName("ReinhardRadioButton")
        self.horizontalLayout_57.addWidget(self.ReinhardRadioButton)
        spacerItem49 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_57.addItem(spacerItem49)
        self.verticalLayout_26 = QtWidgets.QVBoxLayout()
        self.verticalLayout_26.setObjectName("verticalLayout_26")
        self.horizontalLayout_52 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_52.setObjectName("horizontalLayout_52")
        self.ReinhardGammaLabel = QtWidgets.QLabel(parent=self.toneMapGroupBox)
        self.ReinhardGammaLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ReinhardGammaLabel.sizePolicy().hasHeightForWidth())
        self.ReinhardGammaLabel.setSizePolicy(sizePolicy)
        self.ReinhardGammaLabel.setMinimumSize(QtCore.QSize(50, 25))
        self.ReinhardGammaLabel.setMaximumSize(QtCore.QSize(50, 25))
        self.ReinhardGammaLabel.setToolTip("Dynamic range compression applying gamma\n"
"correction.\n"
"For gamma = 1 no correction is applied.\n"
"Values less than 1 darken the image.\n"
"Values greater than 1 increase the brightness\n"
"of the image.")
        self.ReinhardGammaLabel.setStatusTip("")
        self.ReinhardGammaLabel.setWhatsThis("")
        self.ReinhardGammaLabel.setAccessibleName("")
        self.ReinhardGammaLabel.setAccessibleDescription("")
        self.ReinhardGammaLabel.setText("Gamma")
        self.ReinhardGammaLabel.setObjectName("ReinhardGammaLabel")
        self.horizontalLayout_52.addWidget(self.ReinhardGammaLabel)
        self.ReinhardGammaSpinBox = QtWidgets.QDoubleSpinBox(parent=self.toneMapGroupBox)
        self.ReinhardGammaSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ReinhardGammaSpinBox.sizePolicy().hasHeightForWidth())
        self.ReinhardGammaSpinBox.setSizePolicy(sizePolicy)
        self.ReinhardGammaSpinBox.setMinimumSize(QtCore.QSize(50, 25))
        self.ReinhardGammaSpinBox.setMaximumSize(QtCore.QSize(50, 25))
        self.ReinhardGammaSpinBox.setToolTip("Dynamic range compression applying gamma\n"
"correction.\n"
"For gamma = 1 no correction is applied.\n"
"Values less than 1 darken the image.\n"
"Values greater than 1 increase the brightness\n"
"of the image.")
        self.ReinhardGammaSpinBox.setStatusTip("")
        self.ReinhardGammaSpinBox.setWhatsThis("")
        self.ReinhardGammaSpinBox.setAccessibleName("")
        self.ReinhardGammaSpinBox.setAccessibleDescription("")
        self.ReinhardGammaSpinBox.setFrame(True)
        self.ReinhardGammaSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.ReinhardGammaSpinBox.setSpecialValueText("")
        self.ReinhardGammaSpinBox.setDecimals(1)
        self.ReinhardGammaSpinBox.setMinimum(0.0)
        self.ReinhardGammaSpinBox.setMaximum(3.0)
        self.ReinhardGammaSpinBox.setSingleStep(0.1)
        self.ReinhardGammaSpinBox.setProperty("value", 1.0)
        self.ReinhardGammaSpinBox.setObjectName("ReinhardGammaSpinBox")
        self.horizontalLayout_52.addWidget(self.ReinhardGammaSpinBox)
        self.ReinhardIntensityLabel = QtWidgets.QLabel(parent=self.toneMapGroupBox)
        self.ReinhardIntensityLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ReinhardIntensityLabel.sizePolicy().hasHeightForWidth())
        self.ReinhardIntensityLabel.setSizePolicy(sizePolicy)
        self.ReinhardIntensityLabel.setMinimumSize(QtCore.QSize(65, 25))
        self.ReinhardIntensityLabel.setMaximumSize(QtCore.QSize(65, 25))
        self.ReinhardIntensityLabel.setToolTip("Value in the range between -8 and 8.\n"
"Higher intensity values produce brighter images.")
        self.ReinhardIntensityLabel.setStatusTip("")
        self.ReinhardIntensityLabel.setWhatsThis("")
        self.ReinhardIntensityLabel.setAccessibleName("")
        self.ReinhardIntensityLabel.setAccessibleDescription("")
        self.ReinhardIntensityLabel.setText("Intensity")
        self.ReinhardIntensityLabel.setObjectName("ReinhardIntensityLabel")
        self.horizontalLayout_52.addWidget(self.ReinhardIntensityLabel)
        self.ReinhardIntensitySpinBox = QtWidgets.QDoubleSpinBox(parent=self.toneMapGroupBox)
        self.ReinhardIntensitySpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ReinhardIntensitySpinBox.sizePolicy().hasHeightForWidth())
        self.ReinhardIntensitySpinBox.setSizePolicy(sizePolicy)
        self.ReinhardIntensitySpinBox.setMinimumSize(QtCore.QSize(50, 25))
        self.ReinhardIntensitySpinBox.setMaximumSize(QtCore.QSize(50, 25))
        self.ReinhardIntensitySpinBox.setToolTip("Value in the range between -8 and 8.\n"
"Higher intensity values produce brighter images.")
        self.ReinhardIntensitySpinBox.setStatusTip("")
        self.ReinhardIntensitySpinBox.setWhatsThis("")
        self.ReinhardIntensitySpinBox.setAccessibleName("")
        self.ReinhardIntensitySpinBox.setAccessibleDescription("")
        self.ReinhardIntensitySpinBox.setFrame(True)
        self.ReinhardIntensitySpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.ReinhardIntensitySpinBox.setSpecialValueText("")
        self.ReinhardIntensitySpinBox.setDecimals(1)
        self.ReinhardIntensitySpinBox.setMinimum(-8.0)
        self.ReinhardIntensitySpinBox.setMaximum(8.0)
        self.ReinhardIntensitySpinBox.setSingleStep(0.1)
        self.ReinhardIntensitySpinBox.setProperty("value", 0.0)
        self.ReinhardIntensitySpinBox.setObjectName("ReinhardIntensitySpinBox")
        self.horizontalLayout_52.addWidget(self.ReinhardIntensitySpinBox)
        self.verticalLayout_26.addLayout(self.horizontalLayout_52)
        self.horizontalLayout_56 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_56.setObjectName("horizontalLayout_56")
        self.ReinhardLightLabel = QtWidgets.QLabel(parent=self.toneMapGroupBox)
        self.ReinhardLightLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ReinhardLightLabel.sizePolicy().hasHeightForWidth())
        self.ReinhardLightLabel.setSizePolicy(sizePolicy)
        self.ReinhardLightLabel.setMinimumSize(QtCore.QSize(50, 25))
        self.ReinhardLightLabel.setMaximumSize(QtCore.QSize(50, 25))
        self.ReinhardLightLabel.setToolTip("Controls the light adaptation.\n"
"Range between 0 and 1.\n"
"A value of 1 indicates an adaptation based\n"
"only on the pixel value.\n"
"A value of 0 indicates a global adaptation.\n"
"Intermediate values can be used for a weighted\n"
"combination of the two.")
        self.ReinhardLightLabel.setStatusTip("")
        self.ReinhardLightLabel.setWhatsThis("")
        self.ReinhardLightLabel.setAccessibleName("")
        self.ReinhardLightLabel.setAccessibleDescription("")
        self.ReinhardLightLabel.setText("Light")
        self.ReinhardLightLabel.setObjectName("ReinhardLightLabel")
        self.horizontalLayout_56.addWidget(self.ReinhardLightLabel)
        self.ReinhardLightSpinBox = QtWidgets.QDoubleSpinBox(parent=self.toneMapGroupBox)
        self.ReinhardLightSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ReinhardLightSpinBox.sizePolicy().hasHeightForWidth())
        self.ReinhardLightSpinBox.setSizePolicy(sizePolicy)
        self.ReinhardLightSpinBox.setMinimumSize(QtCore.QSize(50, 25))
        self.ReinhardLightSpinBox.setMaximumSize(QtCore.QSize(50, 25))
        self.ReinhardLightSpinBox.setToolTip("Controls the light adaptation.\n"
"Range between 0 and 1.\n"
"A value of 1 indicates an adaptation based\n"
"only on the pixel value.\n"
"A value of 0 indicates a global adaptation.\n"
"Intermediate values can be used for a weighted\n"
"combination of the two.")
        self.ReinhardLightSpinBox.setStatusTip("")
        self.ReinhardLightSpinBox.setWhatsThis("")
        self.ReinhardLightSpinBox.setAccessibleName("")
        self.ReinhardLightSpinBox.setAccessibleDescription("")
        self.ReinhardLightSpinBox.setFrame(True)
        self.ReinhardLightSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.ReinhardLightSpinBox.setSpecialValueText("")
        self.ReinhardLightSpinBox.setDecimals(1)
        self.ReinhardLightSpinBox.setMinimum(0.0)
        self.ReinhardLightSpinBox.setMaximum(1.0)
        self.ReinhardLightSpinBox.setSingleStep(0.1)
        self.ReinhardLightSpinBox.setProperty("value", 0.0)
        self.ReinhardLightSpinBox.setObjectName("ReinhardLightSpinBox")
        self.horizontalLayout_56.addWidget(self.ReinhardLightSpinBox)
        self.ReinhardColorLabel = QtWidgets.QLabel(parent=self.toneMapGroupBox)
        self.ReinhardColorLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ReinhardColorLabel.sizePolicy().hasHeightForWidth())
        self.ReinhardColorLabel.setSizePolicy(sizePolicy)
        self.ReinhardColorLabel.setMinimumSize(QtCore.QSize(65, 25))
        self.ReinhardColorLabel.setMaximumSize(QtCore.QSize(65, 25))
        self.ReinhardColorLabel.setToolTip("Controls the color adaptation.\n"
"Range between 0 and 1.\n"
"If the value is 1, the channels are treated\n"
"independently.\n"
"If the value is 0, the adaptation level is the\n"
"same for each channel.\n"
"Intermediate values can be used for a weighted\n"
"combination of the two.")
        self.ReinhardColorLabel.setStatusTip("")
        self.ReinhardColorLabel.setWhatsThis("")
        self.ReinhardColorLabel.setAccessibleName("")
        self.ReinhardColorLabel.setAccessibleDescription("")
        self.ReinhardColorLabel.setText("Color")
        self.ReinhardColorLabel.setObjectName("ReinhardColorLabel")
        self.horizontalLayout_56.addWidget(self.ReinhardColorLabel)
        self.ReinhardColorSpinBox = QtWidgets.QDoubleSpinBox(parent=self.toneMapGroupBox)
        self.ReinhardColorSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.ReinhardColorSpinBox.sizePolicy().hasHeightForWidth())
        self.ReinhardColorSpinBox.setSizePolicy(sizePolicy)
        self.ReinhardColorSpinBox.setMinimumSize(QtCore.QSize(50, 25))
        self.ReinhardColorSpinBox.setMaximumSize(QtCore.QSize(50, 25))
        self.ReinhardColorSpinBox.setToolTip("Controls the color adaptation.\n"
"Range between 0 and 1.\n"
"If the value is 1, the channels are treated\n"
"independently.\n"
"If the value is 0, the adaptation level is the\n"
"same for each channel.\n"
"Intermediate values can be used for a weighted\n"
"combination of the two.")
        self.ReinhardColorSpinBox.setStatusTip("")
        self.ReinhardColorSpinBox.setWhatsThis("")
        self.ReinhardColorSpinBox.setAccessibleName("")
        self.ReinhardColorSpinBox.setAccessibleDescription("")
        self.ReinhardColorSpinBox.setFrame(True)
        self.ReinhardColorSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.ReinhardColorSpinBox.setSpecialValueText("")
        self.ReinhardColorSpinBox.setDecimals(1)
        self.ReinhardColorSpinBox.setMinimum(0.0)
        self.ReinhardColorSpinBox.setMaximum(1.0)
        self.ReinhardColorSpinBox.setSingleStep(0.1)
        self.ReinhardColorSpinBox.setProperty("value", 0.0)
        self.ReinhardColorSpinBox.setObjectName("ReinhardColorSpinBox")
        self.horizontalLayout_56.addWidget(self.ReinhardColorSpinBox)
        self.verticalLayout_26.addLayout(self.horizontalLayout_56)
        self.horizontalLayout_57.addLayout(self.verticalLayout_26)
        self.verticalLayout_32.addLayout(self.horizontalLayout_57)
        self.line = QtWidgets.QFrame(parent=self.toneMapGroupBox)
        self.line.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line.setObjectName("line")
        self.verticalLayout_32.addWidget(self.line)
        self.horizontalLayout_60 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_60.setObjectName("horizontalLayout_60")
        self.DragoRadioButton = QtWidgets.QRadioButton(parent=self.toneMapGroupBox)
        self.DragoRadioButton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DragoRadioButton.sizePolicy().hasHeightForWidth())
        self.DragoRadioButton.setSizePolicy(sizePolicy)
        self.DragoRadioButton.setMinimumSize(QtCore.QSize(90, 22))
        self.DragoRadioButton.setMaximumSize(QtCore.QSize(90, 22))
        self.DragoRadioButton.setToolTip("Use Drago algorithm for tone mapping.")
        self.DragoRadioButton.setStatusTip("")
        self.DragoRadioButton.setWhatsThis("")
        self.DragoRadioButton.setAccessibleName("")
        self.DragoRadioButton.setAccessibleDescription("")
        self.DragoRadioButton.setText("Dra&go")
        self.DragoRadioButton.setObjectName("DragoRadioButton")
        self.horizontalLayout_60.addWidget(self.DragoRadioButton)
        spacerItem50 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_60.addItem(spacerItem50)
        self.verticalLayout_30 = QtWidgets.QVBoxLayout()
        self.verticalLayout_30.setObjectName("verticalLayout_30")
        self.horizontalLayout_58 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_58.setObjectName("horizontalLayout_58")
        self.DragoGammaLabel = QtWidgets.QLabel(parent=self.toneMapGroupBox)
        self.DragoGammaLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DragoGammaLabel.sizePolicy().hasHeightForWidth())
        self.DragoGammaLabel.setSizePolicy(sizePolicy)
        self.DragoGammaLabel.setMinimumSize(QtCore.QSize(50, 25))
        self.DragoGammaLabel.setMaximumSize(QtCore.QSize(50, 25))
        self.DragoGammaLabel.setToolTip("Dynamic range compression applying gamma\n"
"correction.\n"
"For gamma = 1 no correction is applied.\n"
"Values less than 1 darken the image.\n"
"Values greater than 1 increase the brightness\n"
"of the image.")
        self.DragoGammaLabel.setStatusTip("")
        self.DragoGammaLabel.setWhatsThis("")
        self.DragoGammaLabel.setAccessibleName("")
        self.DragoGammaLabel.setAccessibleDescription("")
        self.DragoGammaLabel.setText("Gamma")
        self.DragoGammaLabel.setObjectName("DragoGammaLabel")
        self.horizontalLayout_58.addWidget(self.DragoGammaLabel)
        self.DragoGammaSpinBox = QtWidgets.QDoubleSpinBox(parent=self.toneMapGroupBox)
        self.DragoGammaSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DragoGammaSpinBox.sizePolicy().hasHeightForWidth())
        self.DragoGammaSpinBox.setSizePolicy(sizePolicy)
        self.DragoGammaSpinBox.setMinimumSize(QtCore.QSize(50, 25))
        self.DragoGammaSpinBox.setMaximumSize(QtCore.QSize(50, 25))
        self.DragoGammaSpinBox.setToolTip("Dynamic range compression applying gamma\n"
"correction.\n"
"For gamma = 1 no correction is applied.\n"
"Values less than 1 darken the image.\n"
"Values greater than 1 increase the brightness\n"
"of the image.")
        self.DragoGammaSpinBox.setStatusTip("")
        self.DragoGammaSpinBox.setWhatsThis("")
        self.DragoGammaSpinBox.setAccessibleName("")
        self.DragoGammaSpinBox.setAccessibleDescription("")
        self.DragoGammaSpinBox.setFrame(True)
        self.DragoGammaSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.DragoGammaSpinBox.setSpecialValueText("")
        self.DragoGammaSpinBox.setDecimals(1)
        self.DragoGammaSpinBox.setMinimum(0.0)
        self.DragoGammaSpinBox.setMaximum(3.0)
        self.DragoGammaSpinBox.setSingleStep(0.1)
        self.DragoGammaSpinBox.setProperty("value", 1.0)
        self.DragoGammaSpinBox.setObjectName("DragoGammaSpinBox")
        self.horizontalLayout_58.addWidget(self.DragoGammaSpinBox)
        self.DragoSaturationLabel = QtWidgets.QLabel(parent=self.toneMapGroupBox)
        self.DragoSaturationLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DragoSaturationLabel.sizePolicy().hasHeightForWidth())
        self.DragoSaturationLabel.setSizePolicy(sizePolicy)
        self.DragoSaturationLabel.setMinimumSize(QtCore.QSize(65, 25))
        self.DragoSaturationLabel.setMaximumSize(QtCore.QSize(65, 25))
        self.DragoSaturationLabel.setToolTip("It is used to increase or decrease the color\n"
"saturation.\n"
"High values produce vivid colors.\n"
"Values close to 0 cause colors to fade to grayscale.")
        self.DragoSaturationLabel.setStatusTip("")
        self.DragoSaturationLabel.setWhatsThis("")
        self.DragoSaturationLabel.setAccessibleName("")
        self.DragoSaturationLabel.setAccessibleDescription("")
        self.DragoSaturationLabel.setText("Saturation")
        self.DragoSaturationLabel.setObjectName("DragoSaturationLabel")
        self.horizontalLayout_58.addWidget(self.DragoSaturationLabel)
        self.DragoSaturationSpinBox = QtWidgets.QDoubleSpinBox(parent=self.toneMapGroupBox)
        self.DragoSaturationSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DragoSaturationSpinBox.sizePolicy().hasHeightForWidth())
        self.DragoSaturationSpinBox.setSizePolicy(sizePolicy)
        self.DragoSaturationSpinBox.setMinimumSize(QtCore.QSize(50, 25))
        self.DragoSaturationSpinBox.setMaximumSize(QtCore.QSize(50, 25))
        self.DragoSaturationSpinBox.setToolTip("It is used to increase or decrease the color\n"
"saturation.\n"
"High values produce vivid colors.\n"
"Values close to 0 cause colors to fade to grayscale.")
        self.DragoSaturationSpinBox.setStatusTip("")
        self.DragoSaturationSpinBox.setWhatsThis("")
        self.DragoSaturationSpinBox.setAccessibleName("")
        self.DragoSaturationSpinBox.setFrame(True)
        self.DragoSaturationSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.DragoSaturationSpinBox.setSpecialValueText("")
        self.DragoSaturationSpinBox.setDecimals(1)
        self.DragoSaturationSpinBox.setMinimum(0.0)
        self.DragoSaturationSpinBox.setMaximum(10.0)
        self.DragoSaturationSpinBox.setSingleStep(0.1)
        self.DragoSaturationSpinBox.setProperty("value", 0.0)
        self.DragoSaturationSpinBox.setObjectName("DragoSaturationSpinBox")
        self.horizontalLayout_58.addWidget(self.DragoSaturationSpinBox)
        self.verticalLayout_30.addLayout(self.horizontalLayout_58)
        self.horizontalLayout_59 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_59.setObjectName("horizontalLayout_59")
        self.DragoBiasLabel = QtWidgets.QLabel(parent=self.toneMapGroupBox)
        self.DragoBiasLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DragoBiasLabel.sizePolicy().hasHeightForWidth())
        self.DragoBiasLabel.setSizePolicy(sizePolicy)
        self.DragoBiasLabel.setMinimumSize(QtCore.QSize(50, 25))
        self.DragoBiasLabel.setMaximumSize(QtCore.QSize(50, 25))
        self.DragoBiasLabel.setText("Bias")
        self.DragoBiasLabel.setObjectName("DragoBiasLabel")
        self.horizontalLayout_59.addWidget(self.DragoBiasLabel)
        self.DragoBiasSpinBox = QtWidgets.QDoubleSpinBox(parent=self.toneMapGroupBox)
        self.DragoBiasSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.DragoBiasSpinBox.sizePolicy().hasHeightForWidth())
        self.DragoBiasSpinBox.setSizePolicy(sizePolicy)
        self.DragoBiasSpinBox.setMinimumSize(QtCore.QSize(50, 25))
        self.DragoBiasSpinBox.setMaximumSize(QtCore.QSize(50, 25))
        self.DragoBiasSpinBox.setToolTip("Range between 0 and 1.\n"
"Values between 0.7 and 0.9 usually give\n"
"the best results.\n"
"By default 0.85.")
        self.DragoBiasSpinBox.setFrame(True)
        self.DragoBiasSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.DragoBiasSpinBox.setSpecialValueText("")
        self.DragoBiasSpinBox.setDecimals(2)
        self.DragoBiasSpinBox.setMinimum(0.0)
        self.DragoBiasSpinBox.setMaximum(1.0)
        self.DragoBiasSpinBox.setSingleStep(0.05)
        self.DragoBiasSpinBox.setProperty("value", 0.85)
        self.DragoBiasSpinBox.setObjectName("DragoBiasSpinBox")
        self.horizontalLayout_59.addWidget(self.DragoBiasSpinBox)
        spacerItem51 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_59.addItem(spacerItem51)
        self.verticalLayout_30.addLayout(self.horizontalLayout_59)
        self.horizontalLayout_60.addLayout(self.verticalLayout_30)
        self.verticalLayout_32.addLayout(self.horizontalLayout_60)
        self.line_2 = QtWidgets.QFrame(parent=self.toneMapGroupBox)
        self.line_2.setFrameShape(QtWidgets.QFrame.Shape.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.line_2.setObjectName("line_2")
        self.verticalLayout_32.addWidget(self.line_2)
        self.horizontalLayout_63 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_63.setObjectName("horizontalLayout_63")
        self.MantiukRadioButton = QtWidgets.QRadioButton(parent=self.toneMapGroupBox)
        self.MantiukRadioButton.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(90)
        sizePolicy.setVerticalStretch(22)
        sizePolicy.setHeightForWidth(self.MantiukRadioButton.sizePolicy().hasHeightForWidth())
        self.MantiukRadioButton.setSizePolicy(sizePolicy)
        self.MantiukRadioButton.setMinimumSize(QtCore.QSize(90, 22))
        self.MantiukRadioButton.setMaximumSize(QtCore.QSize(90, 22))
        self.MantiukRadioButton.setToolTip("Use Mantiuk algorithm for tone mapping.")
        self.MantiukRadioButton.setStatusTip("")
        self.MantiukRadioButton.setWhatsThis("")
        self.MantiukRadioButton.setAccessibleName("")
        self.MantiukRadioButton.setAccessibleDescription("")
        self.MantiukRadioButton.setObjectName("MantiukRadioButton")
        self.horizontalLayout_63.addWidget(self.MantiukRadioButton)
        spacerItem52 = QtWidgets.QSpacerItem(5, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_63.addItem(spacerItem52)
        self.verticalLayout_31 = QtWidgets.QVBoxLayout()
        self.verticalLayout_31.setObjectName("verticalLayout_31")
        self.horizontalLayout_61 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_61.setObjectName("horizontalLayout_61")
        self.MantiukGammaLabel = QtWidgets.QLabel(parent=self.toneMapGroupBox)
        self.MantiukGammaLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MantiukGammaLabel.sizePolicy().hasHeightForWidth())
        self.MantiukGammaLabel.setSizePolicy(sizePolicy)
        self.MantiukGammaLabel.setMinimumSize(QtCore.QSize(50, 25))
        self.MantiukGammaLabel.setMaximumSize(QtCore.QSize(50, 25))
        self.MantiukGammaLabel.setToolTip("Dynamic range compression applying gamma\n"
"correction.\n"
"For gamma = 1 no correction is applied.\n"
"Values less than 1 darken the image.\n"
"Values greater than 1 increase the brightness\n"
"of the image.")
        self.MantiukGammaLabel.setStatusTip("")
        self.MantiukGammaLabel.setWhatsThis("")
        self.MantiukGammaLabel.setAccessibleName("")
        self.MantiukGammaLabel.setAccessibleDescription("")
        self.MantiukGammaLabel.setText("Gamma")
        self.MantiukGammaLabel.setObjectName("MantiukGammaLabel")
        self.horizontalLayout_61.addWidget(self.MantiukGammaLabel)
        self.MantiukGammaSpinBox = QtWidgets.QDoubleSpinBox(parent=self.toneMapGroupBox)
        self.MantiukGammaSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MantiukGammaSpinBox.sizePolicy().hasHeightForWidth())
        self.MantiukGammaSpinBox.setSizePolicy(sizePolicy)
        self.MantiukGammaSpinBox.setMinimumSize(QtCore.QSize(50, 25))
        self.MantiukGammaSpinBox.setMaximumSize(QtCore.QSize(50, 25))
        self.MantiukGammaSpinBox.setToolTip("Dynamic range compression applying gamma\n"
"correction.\n"
"For gamma = 1 no correction is applied.\n"
"Values less than 1 darken the image.\n"
"Values greater than 1 increase the brightness\n"
"of the image.")
        self.MantiukGammaSpinBox.setStatusTip("")
        self.MantiukGammaSpinBox.setWhatsThis("")
        self.MantiukGammaSpinBox.setAccessibleName("")
        self.MantiukGammaSpinBox.setAccessibleDescription("")
        self.MantiukGammaSpinBox.setFrame(True)
        self.MantiukGammaSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.MantiukGammaSpinBox.setSpecialValueText("")
        self.MantiukGammaSpinBox.setDecimals(1)
        self.MantiukGammaSpinBox.setMinimum(0.0)
        self.MantiukGammaSpinBox.setMaximum(3.0)
        self.MantiukGammaSpinBox.setSingleStep(0.1)
        self.MantiukGammaSpinBox.setProperty("value", 1.0)
        self.MantiukGammaSpinBox.setObjectName("MantiukGammaSpinBox")
        self.horizontalLayout_61.addWidget(self.MantiukGammaSpinBox)
        self.MantiukSaturationLabel = QtWidgets.QLabel(parent=self.toneMapGroupBox)
        self.MantiukSaturationLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MantiukSaturationLabel.sizePolicy().hasHeightForWidth())
        self.MantiukSaturationLabel.setSizePolicy(sizePolicy)
        self.MantiukSaturationLabel.setMinimumSize(QtCore.QSize(65, 25))
        self.MantiukSaturationLabel.setMaximumSize(QtCore.QSize(65, 25))
        self.MantiukSaturationLabel.setToolTip("It is used to increase or decrease the color\n"
"saturation.\n"
"High values produce vivid colors.\n"
"Values close to 0 cause colors to fade to grayscale.")
        self.MantiukSaturationLabel.setStatusTip("")
        self.MantiukSaturationLabel.setWhatsThis("")
        self.MantiukSaturationLabel.setAccessibleName("")
        self.MantiukSaturationLabel.setAccessibleDescription("")
        self.MantiukSaturationLabel.setText("Saturation")
        self.MantiukSaturationLabel.setObjectName("MantiukSaturationLabel")
        self.horizontalLayout_61.addWidget(self.MantiukSaturationLabel)
        self.MantiukSaturationSpinBox = QtWidgets.QDoubleSpinBox(parent=self.toneMapGroupBox)
        self.MantiukSaturationSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MantiukSaturationSpinBox.sizePolicy().hasHeightForWidth())
        self.MantiukSaturationSpinBox.setSizePolicy(sizePolicy)
        self.MantiukSaturationSpinBox.setMinimumSize(QtCore.QSize(50, 25))
        self.MantiukSaturationSpinBox.setMaximumSize(QtCore.QSize(50, 25))
        self.MantiukSaturationSpinBox.setToolTip("It is used to increase or decrease the color\n"
"saturation.\n"
"High values produce vivid colors.\n"
"Values close to 0 cause colors to fade to grayscale.")
        self.MantiukSaturationSpinBox.setStatusTip("")
        self.MantiukSaturationSpinBox.setWhatsThis("")
        self.MantiukSaturationSpinBox.setAccessibleName("")
        self.MantiukSaturationSpinBox.setAccessibleDescription("")
        self.MantiukSaturationSpinBox.setFrame(True)
        self.MantiukSaturationSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.MantiukSaturationSpinBox.setSpecialValueText("")
        self.MantiukSaturationSpinBox.setDecimals(1)
        self.MantiukSaturationSpinBox.setMinimum(0.0)
        self.MantiukSaturationSpinBox.setMaximum(10.0)
        self.MantiukSaturationSpinBox.setSingleStep(0.1)
        self.MantiukSaturationSpinBox.setProperty("value", 0.0)
        self.MantiukSaturationSpinBox.setObjectName("MantiukSaturationSpinBox")
        self.horizontalLayout_61.addWidget(self.MantiukSaturationSpinBox)
        self.verticalLayout_31.addLayout(self.horizontalLayout_61)
        self.horizontalLayout_62 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_62.setObjectName("horizontalLayout_62")
        self.MantiukScaleLabel = QtWidgets.QLabel(parent=self.toneMapGroupBox)
        self.MantiukScaleLabel.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MantiukScaleLabel.sizePolicy().hasHeightForWidth())
        self.MantiukScaleLabel.setSizePolicy(sizePolicy)
        self.MantiukScaleLabel.setMinimumSize(QtCore.QSize(50, 25))
        self.MantiukScaleLabel.setMaximumSize(QtCore.QSize(50, 25))
        self.MantiukScaleLabel.setToolTip("Contrast scale factor.\n"
"Range between 0 and 1.\n"
"Values between 0.6 and 0.9 produce\n"
"the best results.")
        self.MantiukScaleLabel.setStatusTip("")
        self.MantiukScaleLabel.setWhatsThis("")
        self.MantiukScaleLabel.setAccessibleName("")
        self.MantiukScaleLabel.setAccessibleDescription("")
        self.MantiukScaleLabel.setText("Scale")
        self.MantiukScaleLabel.setObjectName("MantiukScaleLabel")
        self.horizontalLayout_62.addWidget(self.MantiukScaleLabel)
        self.MantiukScaleSpinBox = QtWidgets.QDoubleSpinBox(parent=self.toneMapGroupBox)
        self.MantiukScaleSpinBox.setEnabled(False)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.MantiukScaleSpinBox.sizePolicy().hasHeightForWidth())
        self.MantiukScaleSpinBox.setSizePolicy(sizePolicy)
        self.MantiukScaleSpinBox.setMinimumSize(QtCore.QSize(50, 25))
        self.MantiukScaleSpinBox.setMaximumSize(QtCore.QSize(50, 25))
        self.MantiukScaleSpinBox.setToolTip("Contrast scale factor.\n"
"Range between 0 and 1.\n"
"Values between 0.6 and 0.9 produce\n"
"the best results.")
        self.MantiukScaleSpinBox.setStatusTip("")
        self.MantiukScaleSpinBox.setWhatsThis("")
        self.MantiukScaleSpinBox.setAccessibleName("")
        self.MantiukScaleSpinBox.setAccessibleDescription("")
        self.MantiukScaleSpinBox.setFrame(True)
        self.MantiukScaleSpinBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.MantiukScaleSpinBox.setSpecialValueText("")
        self.MantiukScaleSpinBox.setDecimals(2)
        self.MantiukScaleSpinBox.setMinimum(0.0)
        self.MantiukScaleSpinBox.setMaximum(1.0)
        self.MantiukScaleSpinBox.setSingleStep(0.05)
        self.MantiukScaleSpinBox.setProperty("value", 0.85)
        self.MantiukScaleSpinBox.setObjectName("MantiukScaleSpinBox")
        self.horizontalLayout_62.addWidget(self.MantiukScaleSpinBox)
        spacerItem53 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_62.addItem(spacerItem53)
        self.verticalLayout_31.addLayout(self.horizontalLayout_62)
        self.horizontalLayout_63.addLayout(self.verticalLayout_31)
        self.verticalLayout_32.addLayout(self.horizontalLayout_63)
        spacerItem54 = QtWidgets.QSpacerItem(20, 19, QtWidgets.QSizePolicy.Policy.Minimum, QtWidgets.QSizePolicy.Policy.Expanding)
        self.verticalLayout_32.addItem(spacerItem54)
        self.verticalLayout_33.addWidget(self.toneMapGroupBox)
        self.DS8tabWidget.addTab(self.tab_hdr, "HDR")
        self.DS8tabWidget.setTabToolTip(self.DS8tabWidget.indexOf(self.tab_hdr), "HDR settings:\n"
"- HDR algorithm to use.\n"
"- High and low percentiles of the Mertens fusion.\n"
"- Tone mapping method and parameters.")
        self.verticalLayout_18.addWidget(self.DS8tabWidget)
        self.groupBox_2 = QtWidgets.QGroupBox(parent=DSuper8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_2.sizePolicy().hasHeightForWidth())
        self.groupBox_2.setSizePolicy(sizePolicy)
        self.groupBox_2.setMinimumSize(QtCore.QSize(384, 330))
        self.groupBox_2.setMaximumSize(QtCore.QSize(384, 330))
        self.groupBox_2.setToolTip("Camera settings:\n"
"- Analogue gain.\n"
"- EV value.\n"
"- White balance.\n"
"- Gains of blue and red.\n"
"- Brightness level.\n"
"- Contrast.\n"
"- Saturation.")
        self.groupBox_2.setStatusTip("")
        self.groupBox_2.setWhatsThis("")
        self.groupBox_2.setAccessibleName("")
        self.groupBox_2.setAccessibleDescription("")
        self.groupBox_2.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.groupBox_2.setTitle("HQ camera settings")
        self.groupBox_2.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.groupBox_2.setFlat(False)
        self.groupBox_2.setObjectName("groupBox_2")
        self.verticalLayout_4 = QtWidgets.QVBoxLayout(self.groupBox_2)
        self.verticalLayout_4.setObjectName("verticalLayout_4")
        self.horizontalLayout_23 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_23.setObjectName("horizontalLayout_23")
        self.analogueGainLabel = QtWidgets.QLabel(parent=self.groupBox_2)
        self.analogueGainLabel.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.analogueGainLabel.sizePolicy().hasHeightForWidth())
        self.analogueGainLabel.setSizePolicy(sizePolicy)
        self.analogueGainLabel.setMinimumSize(QtCore.QSize(90, 30))
        self.analogueGainLabel.setMaximumSize(QtCore.QSize(90, 30))
        self.analogueGainLabel.setToolTip("Analogue gain applied\n"
"by the sensor.\n"
"For low noise should\n"
"be as close to 1 as possible.")
        self.analogueGainLabel.setStatusTip("")
        self.analogueGainLabel.setWhatsThis("")
        self.analogueGainLabel.setAccessibleName("")
        self.analogueGainLabel.setAccessibleDescription("")
        self.analogueGainLabel.setText("Analogue gain")
        self.analogueGainLabel.setObjectName("analogueGainLabel")
        self.horizontalLayout_23.addWidget(self.analogueGainLabel)
        self.analogueGainBox = QtWidgets.QDoubleSpinBox(parent=self.groupBox_2)
        self.analogueGainBox.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.analogueGainBox.sizePolicy().hasHeightForWidth())
        self.analogueGainBox.setSizePolicy(sizePolicy)
        self.analogueGainBox.setMinimumSize(QtCore.QSize(60, 30))
        self.analogueGainBox.setMaximumSize(QtCore.QSize(60, 30))
        self.analogueGainBox.setToolTip("Analogue gain applied\n"
"by the sensor.\n"
"For low noise should\n"
"be as close to 1 as possible.")
        self.analogueGainBox.setStatusTip("")
        self.analogueGainBox.setWhatsThis("")
        self.analogueGainBox.setAccessibleName("")
        self.analogueGainBox.setAccessibleDescription("")
        self.analogueGainBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.analogueGainBox.setSpecialValueText("")
        self.analogueGainBox.setDecimals(1)
        self.analogueGainBox.setMinimum(1.0)
        self.analogueGainBox.setMaximum(16.0)
        self.analogueGainBox.setSingleStep(0.1)
        self.analogueGainBox.setProperty("value", 1.0)
        self.analogueGainBox.setObjectName("analogueGainBox")
        self.horizontalLayout_23.addWidget(self.analogueGainBox)
        spacerItem55 = QtWidgets.QSpacerItem(13, 30, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_23.addItem(spacerItem55)
        self.EVLabel = QtWidgets.QLabel(parent=self.groupBox_2)
        self.EVLabel.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.EVLabel.sizePolicy().hasHeightForWidth())
        self.EVLabel.setSizePolicy(sizePolicy)
        self.EVLabel.setMinimumSize(QtCore.QSize(25, 30))
        self.EVLabel.setMaximumSize(QtCore.QSize(25, 30))
        self.EVLabel.setToolTip("With automatic exposure\n"
"change the exposure value\n"
"of the camera.\n"
"Values between -8.0 and 8.0.\n"
"High values give images brighter.\n"
"Default value 0.0.")
        self.EVLabel.setStatusTip("")
        self.EVLabel.setWhatsThis("")
        self.EVLabel.setAccessibleName("")
        self.EVLabel.setAccessibleDescription("")
        self.EVLabel.setText(" EV")
        self.EVLabel.setObjectName("EVLabel")
        self.horizontalLayout_23.addWidget(self.EVLabel)
        self.EVBox = QtWidgets.QDoubleSpinBox(parent=self.groupBox_2)
        self.EVBox.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.EVBox.sizePolicy().hasHeightForWidth())
        self.EVBox.setSizePolicy(sizePolicy)
        self.EVBox.setMinimumSize(QtCore.QSize(60, 30))
        self.EVBox.setMaximumSize(QtCore.QSize(60, 30))
        self.EVBox.setToolTip("With automatic exposure\n"
"change the exposure value\n"
"of the camera.\n"
"Values between -8.0 and 8.0.\n"
"High values give images brighter.\n"
"Default value 0.0.")
        self.EVBox.setStatusTip("")
        self.EVBox.setWhatsThis("")
        self.EVBox.setAccessibleName("")
        self.EVBox.setAccessibleDescription("")
        self.EVBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.EVBox.setSpecialValueText("")
        self.EVBox.setDecimals(1)
        self.EVBox.setMinimum(-8.0)
        self.EVBox.setMaximum(8.0)
        self.EVBox.setSingleStep(0.1)
        self.EVBox.setObjectName("EVBox")
        self.horizontalLayout_23.addWidget(self.EVBox)
        self.verticalLayout_4.addLayout(self.horizontalLayout_23)
        self.horizontalLayout_13 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_13.setObjectName("horizontalLayout_13")
        spacerItem56 = QtWidgets.QSpacerItem(0, 20, QtWidgets.QSizePolicy.Policy.Expanding, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_13.addItem(spacerItem56)
        self.awbLabel = QtWidgets.QLabel(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.awbLabel.sizePolicy().hasHeightForWidth())
        self.awbLabel.setSizePolicy(sizePolicy)
        self.awbLabel.setMinimumSize(QtCore.QSize(90, 30))
        self.awbLabel.setMaximumSize(QtCore.QSize(90, 30))
        self.awbLabel.setToolTip("Set the white balance preset.\n"
"If the active option is \"Manual\",\n"
"the automatic adjustments are\n"
"disabled and the white balance\n"
"can be adjusted manually using\n"
"the blue and red gain controls.")
        self.awbLabel.setStatusTip("")
        self.awbLabel.setWhatsThis("")
        self.awbLabel.setAccessibleName("")
        self.awbLabel.setAccessibleDescription("")
        self.awbLabel.setText("White balance")
        self.awbLabel.setAlignment(QtCore.Qt.AlignmentFlag.AlignCenter)
        self.awbLabel.setObjectName("awbLabel")
        self.horizontalLayout_13.addWidget(self.awbLabel)
        self.awbBox = QtWidgets.QComboBox(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.awbBox.sizePolicy().hasHeightForWidth())
        self.awbBox.setSizePolicy(sizePolicy)
        self.awbBox.setMinimumSize(QtCore.QSize(120, 30))
        self.awbBox.setMaximumSize(QtCore.QSize(120, 30))
        self.awbBox.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.awbBox.setToolTip("Set the white balance preset.\n"
"If the active option is \"Manual\",\n"
"the automatic adjustments are\n"
"disabled and the white balance\n"
"can be adjusted manually using\n"
"the blue and red gain controls.")
        self.awbBox.setStatusTip("")
        self.awbBox.setWhatsThis("")
        self.awbBox.setAccessibleName("")
        self.awbBox.setAccessibleDescription("")
        self.awbBox.setEditable(False)
        self.awbBox.setCurrentText("Auto")
        self.awbBox.setMaxCount(10)
        self.awbBox.setObjectName("awbBox")
        self.awbBox.addItem("")
        self.awbBox.setItemText(0, "Auto")
        self.awbBox.addItem("")
        self.awbBox.addItem("")
        self.awbBox.addItem("")
        self.awbBox.addItem("")
        self.awbBox.addItem("")
        self.awbBox.addItem("")
        self.awbBox.addItem("")
        self.awbBox.addItem("")
        self.horizontalLayout_13.addWidget(self.awbBox)
        self.awbManualBtn = QtWidgets.QPushButton(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.awbManualBtn.sizePolicy().hasHeightForWidth())
        self.awbManualBtn.setSizePolicy(sizePolicy)
        self.awbManualBtn.setMinimumSize(QtCore.QSize(60, 30))
        self.awbManualBtn.setMaximumSize(QtCore.QSize(60, 30))
        self.awbManualBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.awbManualBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.awbManualBtn.setToolTip("When pressed, the color gains\n"
"of the blue and red will be set\n"
"to the used in the last white\n"
"balance manual setting.\n"
"You can manually adjust the\n"
"color gains of blue and red.")
        self.awbManualBtn.setStatusTip("")
        self.awbManualBtn.setWhatsThis("")
        self.awbManualBtn.setAccessibleName("")
        self.awbManualBtn.setAccessibleDescription("")
        self.awbManualBtn.setText("Manual")
        self.awbManualBtn.setObjectName("awbManualBtn")
        self.horizontalLayout_13.addWidget(self.awbManualBtn)
        self.verticalLayout_4.addLayout(self.horizontalLayout_13)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.verticalLayout_11 = QtWidgets.QVBoxLayout()
        self.verticalLayout_11.setObjectName("verticalLayout_11")
        self.blueLabel = QtWidgets.QLabel(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.blueLabel.sizePolicy().hasHeightForWidth())
        self.blueLabel.setSizePolicy(sizePolicy)
        self.blueLabel.setMinimumSize(QtCore.QSize(32, 30))
        self.blueLabel.setMaximumSize(QtCore.QSize(32, 30))
        self.blueLabel.setToolTip("Blue gain for manual adjustment\n"
"of white balance.\n"
"Values between 0.00 and 32.00.\n"
"Default value 2.50")
        self.blueLabel.setStatusTip("")
        self.blueLabel.setWhatsThis("")
        self.blueLabel.setAccessibleName("")
        self.blueLabel.setAccessibleDescription("")
        self.blueLabel.setText("Blue")
        self.blueLabel.setObjectName("blueLabel")
        self.verticalLayout_11.addWidget(self.blueLabel)
        self.redLabel = QtWidgets.QLabel(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.redLabel.sizePolicy().hasHeightForWidth())
        self.redLabel.setSizePolicy(sizePolicy)
        self.redLabel.setMinimumSize(QtCore.QSize(32, 30))
        self.redLabel.setMaximumSize(QtCore.QSize(32, 30))
        self.redLabel.setToolTip("Red gain for manual adjustment\n"
"of white balance.\n"
"Values between 0.00 and 32.00.\n"
"Default value 2.50.")
        self.redLabel.setStatusTip("")
        self.redLabel.setWhatsThis("")
        self.redLabel.setAccessibleName("")
        self.redLabel.setAccessibleDescription("")
        self.redLabel.setText("Red")
        self.redLabel.setObjectName("redLabel")
        self.verticalLayout_11.addWidget(self.redLabel)
        self.brightnessLabel = QtWidgets.QLabel(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.brightnessLabel.sizePolicy().hasHeightForWidth())
        self.brightnessLabel.setSizePolicy(sizePolicy)
        self.brightnessLabel.setMinimumSize(QtCore.QSize(32, 30))
        self.brightnessLabel.setMaximumSize(QtCore.QSize(32, 30))
        self.brightnessLabel.setToolTip("Brightness level adjustment\n"
"of the camera.\n"
"Values between -1.00 and 1.00.\n"
"Default value 0.00.")
        self.brightnessLabel.setStatusTip("")
        self.brightnessLabel.setWhatsThis("")
        self.brightnessLabel.setAccessibleName("")
        self.brightnessLabel.setAccessibleDescription("")
        self.brightnessLabel.setText("Brt.")
        self.brightnessLabel.setObjectName("brightnessLabel")
        self.verticalLayout_11.addWidget(self.brightnessLabel)
        self.contrastLabel = QtWidgets.QLabel(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.contrastLabel.sizePolicy().hasHeightForWidth())
        self.contrastLabel.setSizePolicy(sizePolicy)
        self.contrastLabel.setMinimumSize(QtCore.QSize(32, 30))
        self.contrastLabel.setMaximumSize(QtCore.QSize(32, 30))
        self.contrastLabel.setToolTip("Camera contrast.\n"
"Values between 0.00 and 3.00.\n"
"Default value 1.00.")
        self.contrastLabel.setStatusTip("")
        self.contrastLabel.setWhatsThis("")
        self.contrastLabel.setAccessibleName("")
        self.contrastLabel.setAccessibleDescription("")
        self.contrastLabel.setText("Cont.")
        self.contrastLabel.setObjectName("contrastLabel")
        self.verticalLayout_11.addWidget(self.contrastLabel)
        self.saturationLabel = QtWidgets.QLabel(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.saturationLabel.sizePolicy().hasHeightForWidth())
        self.saturationLabel.setSizePolicy(sizePolicy)
        self.saturationLabel.setMinimumSize(QtCore.QSize(32, 30))
        self.saturationLabel.setMaximumSize(QtCore.QSize(32, 30))
        self.saturationLabel.setToolTip("Camera color saturation.\n"
"Values between 0.00 and 3.00.\n"
"Default value 1.00.")
        self.saturationLabel.setStatusTip("")
        self.saturationLabel.setWhatsThis("")
        self.saturationLabel.setAccessibleName("")
        self.saturationLabel.setAccessibleDescription("")
        self.saturationLabel.setText("Sat.")
        self.saturationLabel.setObjectName("saturationLabel")
        self.verticalLayout_11.addWidget(self.saturationLabel)
        self.horizontalLayout_6.addLayout(self.verticalLayout_11)
        self.verticalLayout_10 = QtWidgets.QVBoxLayout()
        self.verticalLayout_10.setObjectName("verticalLayout_10")
        self.blueGainSlider = QtWidgets.QSlider(parent=self.groupBox_2)
        self.blueGainSlider.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.blueGainSlider.sizePolicy().hasHeightForWidth())
        self.blueGainSlider.setSizePolicy(sizePolicy)
        self.blueGainSlider.setMinimumSize(QtCore.QSize(180, 30))
        self.blueGainSlider.setMaximumSize(QtCore.QSize(180, 30))
        self.blueGainSlider.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.blueGainSlider.setToolTip("Blue gain for manual adjustment\n"
"of white balance.\n"
"Values between 0.00 and 32.00.\n"
"Default value 2.50")
        self.blueGainSlider.setStatusTip("")
        self.blueGainSlider.setWhatsThis("")
        self.blueGainSlider.setAccessibleName("")
        self.blueGainSlider.setAccessibleDescription("")
        self.blueGainSlider.setMinimum(0)
        self.blueGainSlider.setMaximum(3200)
        self.blueGainSlider.setProperty("value", 250)
        self.blueGainSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.blueGainSlider.setObjectName("blueGainSlider")
        self.verticalLayout_10.addWidget(self.blueGainSlider)
        self.redGainSlider = QtWidgets.QSlider(parent=self.groupBox_2)
        self.redGainSlider.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.redGainSlider.sizePolicy().hasHeightForWidth())
        self.redGainSlider.setSizePolicy(sizePolicy)
        self.redGainSlider.setMinimumSize(QtCore.QSize(180, 30))
        self.redGainSlider.setMaximumSize(QtCore.QSize(180, 30))
        self.redGainSlider.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.redGainSlider.setToolTip("Red gain for manual adjustment\n"
"of white balance.\n"
"Values between 0.00 and 32.00.\n"
"Default value 2.50.")
        self.redGainSlider.setStatusTip("")
        self.redGainSlider.setWhatsThis("")
        self.redGainSlider.setAccessibleName("")
        self.redGainSlider.setAccessibleDescription("")
        self.redGainSlider.setMinimum(0)
        self.redGainSlider.setMaximum(3200)
        self.redGainSlider.setSingleStep(1)
        self.redGainSlider.setPageStep(10)
        self.redGainSlider.setProperty("value", 250)
        self.redGainSlider.setSliderPosition(250)
        self.redGainSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.redGainSlider.setObjectName("redGainSlider")
        self.verticalLayout_10.addWidget(self.redGainSlider)
        self.brightnessSlider = QtWidgets.QSlider(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.brightnessSlider.sizePolicy().hasHeightForWidth())
        self.brightnessSlider.setSizePolicy(sizePolicy)
        self.brightnessSlider.setMinimumSize(QtCore.QSize(180, 30))
        self.brightnessSlider.setMaximumSize(QtCore.QSize(180, 30))
        self.brightnessSlider.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.brightnessSlider.setToolTip("Brightness level adjustment\n"
"of the camera.\n"
"Values between -1.00 and 1.00.\n"
"Default value 0.00.")
        self.brightnessSlider.setStatusTip("")
        self.brightnessSlider.setWhatsThis("")
        self.brightnessSlider.setAccessibleName("")
        self.brightnessSlider.setAccessibleDescription("")
        self.brightnessSlider.setMinimum(-100)
        self.brightnessSlider.setMaximum(100)
        self.brightnessSlider.setProperty("value", 0)
        self.brightnessSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.brightnessSlider.setObjectName("brightnessSlider")
        self.verticalLayout_10.addWidget(self.brightnessSlider)
        self.contrastSlider = QtWidgets.QSlider(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.contrastSlider.sizePolicy().hasHeightForWidth())
        self.contrastSlider.setSizePolicy(sizePolicy)
        self.contrastSlider.setMinimumSize(QtCore.QSize(180, 30))
        self.contrastSlider.setMaximumSize(QtCore.QSize(180, 30))
        self.contrastSlider.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.contrastSlider.setToolTip("Camera contrast.\n"
"Values between 0.00 and 3.00.\n"
"Default value 1.00.")
        self.contrastSlider.setStatusTip("")
        self.contrastSlider.setWhatsThis("")
        self.contrastSlider.setAccessibleName("")
        self.contrastSlider.setAccessibleDescription("")
        self.contrastSlider.setMinimum(0)
        self.contrastSlider.setMaximum(300)
        self.contrastSlider.setProperty("value", 100)
        self.contrastSlider.setSliderPosition(100)
        self.contrastSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.contrastSlider.setTickPosition(QtWidgets.QSlider.TickPosition.NoTicks)
        self.contrastSlider.setTickInterval(10)
        self.contrastSlider.setObjectName("contrastSlider")
        self.verticalLayout_10.addWidget(self.contrastSlider)
        self.saturationSlider = QtWidgets.QSlider(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.saturationSlider.sizePolicy().hasHeightForWidth())
        self.saturationSlider.setSizePolicy(sizePolicy)
        self.saturationSlider.setMinimumSize(QtCore.QSize(180, 30))
        self.saturationSlider.setMaximumSize(QtCore.QSize(180, 30))
        self.saturationSlider.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.saturationSlider.setToolTip("Camera color saturation.\n"
"Values between 0.00 and 3.00.\n"
"Default value 1.00.")
        self.saturationSlider.setStatusTip("")
        self.saturationSlider.setWhatsThis("")
        self.saturationSlider.setAccessibleName("")
        self.saturationSlider.setAccessibleDescription("")
        self.saturationSlider.setMinimum(0)
        self.saturationSlider.setMaximum(300)
        self.saturationSlider.setProperty("value", 100)
        self.saturationSlider.setSliderPosition(100)
        self.saturationSlider.setOrientation(QtCore.Qt.Orientation.Horizontal)
        self.saturationSlider.setObjectName("saturationSlider")
        self.verticalLayout_10.addWidget(self.saturationSlider)
        self.horizontalLayout_6.addLayout(self.verticalLayout_10)
        self.verticalLayout_9 = QtWidgets.QVBoxLayout()
        self.verticalLayout_9.setObjectName("verticalLayout_9")
        self.blueGainBox = QtWidgets.QDoubleSpinBox(parent=self.groupBox_2)
        self.blueGainBox.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.blueGainBox.sizePolicy().hasHeightForWidth())
        self.blueGainBox.setSizePolicy(sizePolicy)
        self.blueGainBox.setMinimumSize(QtCore.QSize(60, 30))
        self.blueGainBox.setMaximumSize(QtCore.QSize(60, 30))
        self.blueGainBox.setToolTip("Blue gain for manual adjustment\n"
"of white balance.\n"
"Values between 0.00 and 32.00.\n"
"Default value 2.50")
        self.blueGainBox.setStatusTip("")
        self.blueGainBox.setWhatsThis("")
        self.blueGainBox.setAccessibleName("")
        self.blueGainBox.setAccessibleDescription("")
        self.blueGainBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.blueGainBox.setSpecialValueText("")
        self.blueGainBox.setDecimals(2)
        self.blueGainBox.setMaximum(32.0)
        self.blueGainBox.setSingleStep(0.01)
        self.blueGainBox.setProperty("value", 2.5)
        self.blueGainBox.setObjectName("blueGainBox")
        self.verticalLayout_9.addWidget(self.blueGainBox)
        self.redGainBox = QtWidgets.QDoubleSpinBox(parent=self.groupBox_2)
        self.redGainBox.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.redGainBox.sizePolicy().hasHeightForWidth())
        self.redGainBox.setSizePolicy(sizePolicy)
        self.redGainBox.setMinimumSize(QtCore.QSize(60, 30))
        self.redGainBox.setMaximumSize(QtCore.QSize(60, 30))
        self.redGainBox.setToolTip("Red gain for manual adjustment\n"
"of white balance.\n"
"Values between 0.00 and 32.00.\n"
"Default value 2.50.")
        self.redGainBox.setStatusTip("")
        self.redGainBox.setWhatsThis("")
        self.redGainBox.setAccessibleName("")
        self.redGainBox.setAccessibleDescription("")
        self.redGainBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.redGainBox.setSpecialValueText("")
        self.redGainBox.setDecimals(2)
        self.redGainBox.setMaximum(32.0)
        self.redGainBox.setSingleStep(0.01)
        self.redGainBox.setProperty("value", 2.5)
        self.redGainBox.setObjectName("redGainBox")
        self.verticalLayout_9.addWidget(self.redGainBox)
        self.brightnessBox = QtWidgets.QDoubleSpinBox(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.brightnessBox.sizePolicy().hasHeightForWidth())
        self.brightnessBox.setSizePolicy(sizePolicy)
        self.brightnessBox.setMinimumSize(QtCore.QSize(60, 30))
        self.brightnessBox.setMaximumSize(QtCore.QSize(60, 30))
        self.brightnessBox.setToolTip("Brightness level adjustment\n"
"of the camera.\n"
"Values between -1.00 and 1.00.\n"
"Default value 0.00.")
        self.brightnessBox.setStatusTip("")
        self.brightnessBox.setWhatsThis("")
        self.brightnessBox.setAccessibleName("")
        self.brightnessBox.setAccessibleDescription("")
        self.brightnessBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.brightnessBox.setSpecialValueText("")
        self.brightnessBox.setDecimals(2)
        self.brightnessBox.setMinimum(-1.0)
        self.brightnessBox.setMaximum(1.0)
        self.brightnessBox.setSingleStep(0.01)
        self.brightnessBox.setObjectName("brightnessBox")
        self.verticalLayout_9.addWidget(self.brightnessBox)
        self.contrastBox = QtWidgets.QDoubleSpinBox(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.contrastBox.sizePolicy().hasHeightForWidth())
        self.contrastBox.setSizePolicy(sizePolicy)
        self.contrastBox.setMinimumSize(QtCore.QSize(60, 30))
        self.contrastBox.setMaximumSize(QtCore.QSize(60, 30))
        self.contrastBox.setToolTip("Camera contrast.\n"
"Values between 0.00 and 3.00.\n"
"Default value 1.00.")
        self.contrastBox.setStatusTip("")
        self.contrastBox.setWhatsThis("")
        self.contrastBox.setAccessibleName("")
        self.contrastBox.setAccessibleDescription("")
        self.contrastBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.contrastBox.setSpecialValueText("")
        self.contrastBox.setDecimals(2)
        self.contrastBox.setMaximum(3.0)
        self.contrastBox.setSingleStep(0.01)
        self.contrastBox.setProperty("value", 1.0)
        self.contrastBox.setObjectName("contrastBox")
        self.verticalLayout_9.addWidget(self.contrastBox)
        self.saturationBox = QtWidgets.QDoubleSpinBox(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.saturationBox.sizePolicy().hasHeightForWidth())
        self.saturationBox.setSizePolicy(sizePolicy)
        self.saturationBox.setMinimumSize(QtCore.QSize(60, 30))
        self.saturationBox.setMaximumSize(QtCore.QSize(60, 30))
        self.saturationBox.setToolTip("Camera color saturation.\n"
"Values between 0.00 and 3.00.\n"
"Default value 1.00.")
        self.saturationBox.setStatusTip("")
        self.saturationBox.setWhatsThis("")
        self.saturationBox.setAccessibleName("")
        self.saturationBox.setAccessibleDescription("")
        self.saturationBox.setAlignment(QtCore.Qt.AlignmentFlag.AlignRight|QtCore.Qt.AlignmentFlag.AlignTrailing|QtCore.Qt.AlignmentFlag.AlignVCenter)
        self.saturationBox.setSpecialValueText("")
        self.saturationBox.setDecimals(2)
        self.saturationBox.setMaximum(3.0)
        self.saturationBox.setSingleStep(0.01)
        self.saturationBox.setProperty("value", 1.0)
        self.saturationBox.setObjectName("saturationBox")
        self.verticalLayout_9.addWidget(self.saturationBox)
        self.horizontalLayout_6.addLayout(self.verticalLayout_9)
        self.verticalLayout_5 = QtWidgets.QVBoxLayout()
        self.verticalLayout_5.setObjectName("verticalLayout_5")
        self.blueResetBtn = QtWidgets.QPushButton(parent=self.groupBox_2)
        self.blueResetBtn.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.blueResetBtn.sizePolicy().hasHeightForWidth())
        self.blueResetBtn.setSizePolicy(sizePolicy)
        self.blueResetBtn.setMinimumSize(QtCore.QSize(60, 30))
        self.blueResetBtn.setMaximumSize(QtCore.QSize(60, 30))
        self.blueResetBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.blueResetBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.blueResetBtn.setToolTip("Blue default value to 2.50.")
        self.blueResetBtn.setStatusTip("")
        self.blueResetBtn.setWhatsThis("")
        self.blueResetBtn.setAccessibleName("")
        self.blueResetBtn.setAccessibleDescription("")
        self.blueResetBtn.setText("Reset")
        self.blueResetBtn.setObjectName("blueResetBtn")
        self.verticalLayout_5.addWidget(self.blueResetBtn)
        self.redResetBtn = QtWidgets.QPushButton(parent=self.groupBox_2)
        self.redResetBtn.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.redResetBtn.sizePolicy().hasHeightForWidth())
        self.redResetBtn.setSizePolicy(sizePolicy)
        self.redResetBtn.setMinimumSize(QtCore.QSize(60, 30))
        self.redResetBtn.setMaximumSize(QtCore.QSize(60, 30))
        self.redResetBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.redResetBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.redResetBtn.setToolTip("Red default value to 2.50.")
        self.redResetBtn.setStatusTip("")
        self.redResetBtn.setWhatsThis("")
        self.redResetBtn.setAccessibleName("")
        self.redResetBtn.setAccessibleDescription("")
        self.redResetBtn.setText("Reset")
        self.redResetBtn.setObjectName("redResetBtn")
        self.verticalLayout_5.addWidget(self.redResetBtn)
        self.resetBrightnessBtn = QtWidgets.QPushButton(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.resetBrightnessBtn.sizePolicy().hasHeightForWidth())
        self.resetBrightnessBtn.setSizePolicy(sizePolicy)
        self.resetBrightnessBtn.setMinimumSize(QtCore.QSize(60, 30))
        self.resetBrightnessBtn.setMaximumSize(QtCore.QSize(60, 30))
        self.resetBrightnessBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.resetBrightnessBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.resetBrightnessBtn.setToolTip("Default value\n"
"brightness to 0.00.")
        self.resetBrightnessBtn.setStatusTip("")
        self.resetBrightnessBtn.setWhatsThis("")
        self.resetBrightnessBtn.setAccessibleName("")
        self.resetBrightnessBtn.setAccessibleDescription("")
        self.resetBrightnessBtn.setText("Reset")
        self.resetBrightnessBtn.setObjectName("resetBrightnessBtn")
        self.verticalLayout_5.addWidget(self.resetBrightnessBtn)
        self.resetContrastBtn = QtWidgets.QPushButton(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.resetContrastBtn.sizePolicy().hasHeightForWidth())
        self.resetContrastBtn.setSizePolicy(sizePolicy)
        self.resetContrastBtn.setMinimumSize(QtCore.QSize(60, 30))
        self.resetContrastBtn.setMaximumSize(QtCore.QSize(60, 30))
        self.resetContrastBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.resetContrastBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.resetContrastBtn.setToolTip("Default value\n"
"contrast to 1.00.")
        self.resetContrastBtn.setStatusTip("")
        self.resetContrastBtn.setWhatsThis("")
        self.resetContrastBtn.setAccessibleName("")
        self.resetContrastBtn.setAccessibleDescription("")
        self.resetContrastBtn.setText("Reset")
        self.resetContrastBtn.setObjectName("resetContrastBtn")
        self.verticalLayout_5.addWidget(self.resetContrastBtn)
        self.resetSaturationBtn = QtWidgets.QPushButton(parent=self.groupBox_2)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.resetSaturationBtn.sizePolicy().hasHeightForWidth())
        self.resetSaturationBtn.setSizePolicy(sizePolicy)
        self.resetSaturationBtn.setMinimumSize(QtCore.QSize(60, 30))
        self.resetSaturationBtn.setMaximumSize(QtCore.QSize(60, 30))
        self.resetSaturationBtn.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.resetSaturationBtn.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.resetSaturationBtn.setToolTip("Default value from\n"
"saturation to 1.00.")
        self.resetSaturationBtn.setStatusTip("")
        self.resetSaturationBtn.setWhatsThis("")
        self.resetSaturationBtn.setAccessibleName("")
        self.resetSaturationBtn.setAccessibleDescription("")
        self.resetSaturationBtn.setText("Reset")
        self.resetSaturationBtn.setObjectName("resetSaturationBtn")
        self.verticalLayout_5.addWidget(self.resetSaturationBtn)
        self.horizontalLayout_6.addLayout(self.verticalLayout_5)
        self.verticalLayout_4.addLayout(self.horizontalLayout_6)
        self.verticalLayout_18.addWidget(self.groupBox_2)
        self.horizontalLayout_49 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_49.setObjectName("horizontalLayout_49")
        self.statusBar = QtWidgets.QLabel(parent=DSuper8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.statusBar.sizePolicy().hasHeightForWidth())
        self.statusBar.setSizePolicy(sizePolicy)
        self.statusBar.setMinimumSize(QtCore.QSize(310, 30))
        self.statusBar.setMaximumSize(QtCore.QSize(310, 30))
        self.statusBar.setToolTip("Shows program status messages.")
        self.statusBar.setStatusTip("")
        self.statusBar.setWhatsThis("")
        self.statusBar.setAccessibleName("")
        self.statusBar.setAccessibleDescription("")
        self.statusBar.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.statusBar.setFrameShape(QtWidgets.QFrame.Shape.StyledPanel)
        self.statusBar.setFrameShadow(QtWidgets.QFrame.Shadow.Sunken)
        self.statusBar.setText("Program started")
        self.statusBar.setObjectName("statusBar")
        self.horizontalLayout_49.addWidget(self.statusBar)
        spacerItem57 = QtWidgets.QSpacerItem(14, 30, QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Minimum)
        self.horizontalLayout_49.addItem(spacerItem57)
        self.quitButton = QtWidgets.QPushButton(parent=DSuper8)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Policy.Fixed, QtWidgets.QSizePolicy.Policy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.quitButton.sizePolicy().hasHeightForWidth())
        self.quitButton.setSizePolicy(sizePolicy)
        self.quitButton.setMinimumSize(QtCore.QSize(60, 30))
        self.quitButton.setMaximumSize(QtCore.QSize(60, 30))
        self.quitButton.setCursor(QtGui.QCursor(QtCore.Qt.CursorShape.PointingHandCursor))
        self.quitButton.setFocusPolicy(QtCore.Qt.FocusPolicy.NoFocus)
        self.quitButton.setToolTip("Exit the program.")
        self.quitButton.setStatusTip("")
        self.quitButton.setWhatsThis("")
        self.quitButton.setAccessibleName("")
        self.quitButton.setAccessibleDescription("")
        self.quitButton.setLocale(QtCore.QLocale(QtCore.QLocale.Language.English, QtCore.QLocale.Country.UnitedStates))
        self.quitButton.setText("Exit")
        self.quitButton.setObjectName("quitButton")
        self.horizontalLayout_49.addWidget(self.quitButton)
        self.verticalLayout_18.addLayout(self.horizontalLayout_49)

        self.retranslateUi(DSuper8)
        self.DS8tabWidget.setCurrentIndex(0)
        self.exposureModeBox.setCurrentIndex(0)
        self.resolutionBox.setCurrentIndex(0)
        self.awbBox.setCurrentIndex(0)
        self.resetContrastBtn.clicked.connect(DSuper8.resetContrast) # type: ignore
        self.blueResetBtn.clicked.connect(DSuper8.resetGainBlue) # type: ignore
        self.redResetBtn.clicked.connect(DSuper8.resetGainRed) # type: ignore
        self.resetSaturationBtn.clicked.connect(DSuper8.resetSaturation) # type: ignore
        self.captureFrmRev.clicked.connect(DSuper8.capFrameRev) # type: ignore
        self.captureStartBtn.clicked.connect(DSuper8.captureStart) # type: ignore
        self.vFlipCheckBox.toggled['bool'].connect(DSuper8.setVFlip) # type: ignore
        self.hFlipCheckBox.toggled['bool'].connect(DSuper8.setHFlip) # type: ignore
        self.captureStopBtn.clicked.connect(DSuper8.captureEnd) # type: ignore
        self.chooseFolderBtn.clicked.connect(DSuper8.chooseFolder) # type: ignore
        self.endFrameBox.valueChanged['int'].connect(DSuper8.setEndFrame) # type: ignore
        self.bwCheckBox.toggled['bool'].connect(self.blueGainSlider.setDisabled) # type: ignore
        self.bwCheckBox.toggled['bool'].connect(self.redGainSlider.setDisabled) # type: ignore
        self.stopsBox.valueChanged['double'].connect(DSuper8.setBlendStops) # type: ignore
        self.bwCheckBox.toggled['bool'].connect(DSuper8.setBW) # type: ignore
        self.captureTestBtn.clicked.connect(DSuper8.takeTestPhoto) # type: ignore
        self.exposureUpBtn.clicked.connect(DSuper8.setExposureUp) # type: ignore
        self.exposureDownBtn.clicked.connect(DSuper8.setExposureDown) # type: ignore
        self.bracketingBox.valueChanged['int'].connect(DSuper8.setBlend) # type: ignore
        self.captureFrmAdv.clicked.connect(DSuper8.capFrameAdv) # type: ignore
        self.captureFrmRev10.clicked.connect(DSuper8.capFrameRev10) # type: ignore
        self.captureFrmAdv10.clicked.connect(DSuper8.capFrameAdv10) # type: ignore
        self.resolutionBox.currentIndexChanged['int'].connect(DSuper8.setCapRes) # type: ignore
        self.forwardButton.clicked.connect(DSuper8.motorFwd) # type: ignore
        self.zoomDial.valueChanged['int'].connect(DSuper8.setZoom) # type: ignore
        self.reverseButton.clicked.connect(DSuper8.motorRev) # type: ignore
        self.ffdButton.clicked.connect(DSuper8.motorffd) # type: ignore
        self.fRevButton.clicked.connect(DSuper8.motorfrev) # type: ignore
        self.stopButton.clicked.connect(DSuper8.motorStop) # type: ignore
        self.awbBox.currentIndexChanged['int'].connect(DSuper8.setAWBmode) # type: ignore
        self.autoExpCheckBox.toggled['bool'].connect(DSuper8.setAutoExp) # type: ignore
        self.timeExpBox.valueChanged['double'].connect(DSuper8.setExposure) # type: ignore
        self.capturePauseBtn.toggled['bool'].connect(DSuper8.capturePause) # type: ignore
        self.quitButton.clicked.connect(DSuper8.quitApp) # type: ignore
        self.lightCheckbox.toggled['bool'].connect(DSuper8.lightSet) # type: ignore
        self.prevCheckBox.clicked['bool'].connect(DSuper8.previewSet) # type: ignore
        self.roiUpButton.clicked.connect(DSuper8.setRoiYUp) # type: ignore
        self.roiLeftButton.clicked.connect(DSuper8.setRoiXLeft) # type: ignore
        self.roiRightButton.clicked.connect(DSuper8.setRoiXRight) # type: ignore
        self.roiDownButton.clicked.connect(DSuper8.setRoiYDown) # type: ignore
        self.gotoCheckBox.clicked['bool'].connect(DSuper8.gotoFrameNumber) # type: ignore
        self.startPosCheckBox.toggled['bool'].connect(DSuper8.synchronizePositionIndicator) # type: ignore
        self.activateMotorCheckBox.toggled['bool'].connect(DSuper8.activateMotor) # type: ignore
        self.frameLCDCountUpBtn.clicked.connect(DSuper8.positionIndicatorUp) # type: ignore
        self.frameLCDCountDownBtn.clicked.connect(DSuper8.positionIndicatorDown) # type: ignore
        self.HDRMertensRadioButton.toggled['bool'].connect(DSuper8.setHDRAlgorithm) # type: ignore
        self.HDRDebevecRadioButton.toggled['bool'].connect(DSuper8.setHDRAlgorithm) # type: ignore
        self.SimpleRadioButton.toggled['bool'].connect(DSuper8.setToneMapAlgorithm) # type: ignore
        self.ReinhardRadioButton.toggled['bool'].connect(DSuper8.setToneMapAlgorithm) # type: ignore
        self.DragoRadioButton.toggled['bool'].connect(DSuper8.setToneMapAlgorithm) # type: ignore
        self.MantiukRadioButton.toggled['bool'].connect(DSuper8.setToneMapAlgorithm) # type: ignore
        self.SimpleGammaSpinBox.valueChanged['double'].connect(DSuper8.simpleGamma) # type: ignore
        self.ReinhardGammaSpinBox.valueChanged['double'].connect(DSuper8.reinhardGamma) # type: ignore
        self.ReinhardIntensitySpinBox.valueChanged['double'].connect(DSuper8.reinhardIntensity) # type: ignore
        self.ReinhardLightSpinBox.valueChanged['double'].connect(DSuper8.reinhardLight) # type: ignore
        self.ReinhardColorSpinBox.valueChanged['double'].connect(DSuper8.reinhardColor) # type: ignore
        self.DragoGammaSpinBox.valueChanged['double'].connect(DSuper8.dragoGamma) # type: ignore
        self.DragoSaturationSpinBox.valueChanged['double'].connect(DSuper8.dragoSaturation) # type: ignore
        self.DragoBiasSpinBox.valueChanged['double'].connect(DSuper8.dragoBias) # type: ignore
        self.MantiukGammaSpinBox.valueChanged['double'].connect(DSuper8.mantiukGamma) # type: ignore
        self.MantiukSaturationSpinBox.valueChanged['double'].connect(DSuper8.mantiukSaturation) # type: ignore
        self.MantiukScaleSpinBox.valueChanged['double'].connect(DSuper8.mantiukScale) # type: ignore
        self.showHist.toggled['bool'].connect(DSuper8.initHistogram) # type: ignore
        self.logarithmHist.toggled['bool'].connect(DSuper8.mklogHist) # type: ignore
        self.roundCorns.toggled['bool'].connect(DSuper8.setRoundCorns) # type: ignore
        self.rotationCheckBox.toggled['bool'].connect(DSuper8.setRotation) # type: ignore
        self.rotationBox.valueChanged['double'].connect(DSuper8.setRotationValue) # type: ignore
        self.croppingCheckBox.toggled['bool'].connect(DSuper8.setCrop) # type: ignore
        self.cropTopBox.valueChanged['int'].connect(DSuper8.setCropT) # type: ignore
        self.cropLeftBox.valueChanged['int'].connect(DSuper8.setCropL) # type: ignore
        self.cropRightBox.valueChanged['int'].connect(DSuper8.setCropR) # type: ignore
        self.cropBottomBox.valueChanged['int'].connect(DSuper8.setCropB) # type: ignore
        self.passToCheckbox.clicked.connect(DSuper8.passToLCDIndicator) # type: ignore
        self.loadConfigButton.clicked.connect(DSuper8.loadConfig) # type: ignore
        self.saveAsButton.clicked.connect(DSuper8.saveConfig) # type: ignore
        self.saveConfigButton.clicked.connect(DSuper8.saveCurrentConfig) # type: ignore
        self.configFileBox.textChanged['QString'].connect(DSuper8.checkconfigFileBox) # type: ignore
        self.capFolderBox.textChanged['QString'].connect(DSuper8.checkCaptureFolder) # type: ignore
        self.saveAllCheckBox.toggled['bool'].connect(DSuper8.saveBracketImg) # type: ignore
        self.PHighSpinBox.valueChanged['double'].connect(DSuper8.setPercentHigh) # type: ignore
        self.PLowSpinBox.valueChanged['double'].connect(DSuper8.setPercentLow) # type: ignore
        self.sharpCheckBox.toggled['bool'].connect(DSuper8.showSharpness) # type: ignore
        self.awbManualBtn.clicked.connect(DSuper8.awbManual) # type: ignore
        self.analogueGainBox.valueChanged['double'].connect(DSuper8.setAnalogueGain) # type: ignore
        self.EVBox.valueChanged['double'].connect(DSuper8.setEV) # type: ignore
        self.blueGainSlider.valueChanged['int'].connect(DSuper8.setGainBlueSlider) # type: ignore
        self.blueGainBox.valueChanged['double'].connect(DSuper8.setGainBlueBox) # type: ignore
        self.redGainSlider.valueChanged['int'].connect(DSuper8.setGainRedSlider) # type: ignore
        self.redGainBox.valueChanged['double'].connect(DSuper8.setGainRedBox) # type: ignore
        self.brightnessSlider.valueChanged['int'].connect(DSuper8.setBrightnessSlider) # type: ignore
        self.brightnessBox.valueChanged['double'].connect(DSuper8.setBrightnessBox) # type: ignore
        self.resetBrightnessBtn.clicked.connect(DSuper8.resetBrightness) # type: ignore
        self.contrastSlider.valueChanged['int'].connect(DSuper8.setContrastSlider) # type: ignore
        self.contrastBox.valueChanged['double'].connect(DSuper8.setContrastBox) # type: ignore
        self.saturationSlider.valueChanged['int'].connect(DSuper8.setSaturationSlider) # type: ignore
        self.saturationBox.valueChanged['double'].connect(DSuper8.setSaturationBox) # type: ignore
        self.constraintModeBox.currentIndexChanged['int'].connect(DSuper8.setConstraintMode) # type: ignore
        self.exposureModeBox.currentIndexChanged['int'].connect(DSuper8.setExposureMode) # type: ignore
        self.meteringModeBox.currentIndexChanged['int'].connect(DSuper8.setMeteringMode) # type: ignore
        self.sharpnessBox.valueChanged['double'].connect(DSuper8.setSharpness) # type: ignore
        self.bwCheckBox.toggled['bool'].connect(self.blueGainBox.setDisabled) # type: ignore
        self.bwCheckBox.toggled['bool'].connect(self.redGainBox.setDisabled) # type: ignore
        QtCore.QMetaObject.connectSlotsByName(DSuper8)
        DSuper8.setTabOrder(self.zoomDial, self.fRevButton)
        DSuper8.setTabOrder(self.fRevButton, self.reverseButton)
        DSuper8.setTabOrder(self.reverseButton, self.stopButton)
        DSuper8.setTabOrder(self.stopButton, self.forwardButton)
        DSuper8.setTabOrder(self.forwardButton, self.ffdButton)
        DSuper8.setTabOrder(self.ffdButton, self.nextFrameBox)
        DSuper8.setTabOrder(self.nextFrameBox, self.bracketingBox)
        DSuper8.setTabOrder(self.bracketingBox, self.endFrameBox)
        DSuper8.setTabOrder(self.endFrameBox, self.stopsBox)
        DSuper8.setTabOrder(self.stopsBox, self.exposureDownBtn)
        DSuper8.setTabOrder(self.exposureDownBtn, self.exposureUpBtn)
        DSuper8.setTabOrder(self.exposureUpBtn, self.chooseFolderBtn)
        DSuper8.setTabOrder(self.chooseFolderBtn, self.captureFrmRev10)
        DSuper8.setTabOrder(self.captureFrmRev10, self.captureFrmRev)
        DSuper8.setTabOrder(self.captureFrmRev, self.captureFrmAdv)
        DSuper8.setTabOrder(self.captureFrmAdv, self.captureFrmAdv10)
        DSuper8.setTabOrder(self.captureFrmAdv10, self.captureStopBtn)
        DSuper8.setTabOrder(self.captureStopBtn, self.capturePauseBtn)
        DSuper8.setTabOrder(self.capturePauseBtn, self.vFlipCheckBox)
        DSuper8.setTabOrder(self.vFlipCheckBox, self.hFlipCheckBox)
        DSuper8.setTabOrder(self.hFlipCheckBox, self.bwCheckBox)
        DSuper8.setTabOrder(self.bwCheckBox, self.sharpnessBox)
        DSuper8.setTabOrder(self.sharpnessBox, self.resolutionBox)
        DSuper8.setTabOrder(self.resolutionBox, self.awbBox)
        DSuper8.setTabOrder(self.awbBox, self.awbManualBtn)
        DSuper8.setTabOrder(self.awbManualBtn, self.blueGainBox)
        DSuper8.setTabOrder(self.blueGainBox, self.blueResetBtn)
        DSuper8.setTabOrder(self.blueResetBtn, self.redGainSlider)
        DSuper8.setTabOrder(self.redGainSlider, self.redGainBox)
        DSuper8.setTabOrder(self.redGainBox, self.redResetBtn)
        DSuper8.setTabOrder(self.redResetBtn, self.saturationSlider)
        DSuper8.setTabOrder(self.saturationSlider, self.saturationBox)
        DSuper8.setTabOrder(self.saturationBox, self.resetSaturationBtn)
        DSuper8.setTabOrder(self.resetSaturationBtn, self.DS8tabWidget)

    def retranslateUi(self, DSuper8):
        _translate = QtCore.QCoreApplication.translate
        self.groupBox.setTitle(_translate("DSuper8", "Configuration file"))
        self.exposureBoxMin.setSuffix(_translate("DSuper8", " ms"))
        self.exposureBox.setSuffix(_translate("DSuper8", " ms"))
        self.exposureBoxMax.setSuffix(_translate("DSuper8", " ms"))
        self.gainLabelA.setToolTip(_translate("DSuper8", "Ganacia analógica informada por la cámara.\n"
"Valores entre 1 y 16."))
        self.gainLabelD_2.setToolTip(_translate("DSuper8", "Ganacia digital informada por la cámara.\n"
"Si no está cerca de 1, la iluminación es\n"
"muy baja."))
        self.constraintModeBox.setItemText(0, _translate("DSuper8", "Normal"))
        self.constraintModeBox.setItemText(1, _translate("DSuper8", "Highlight"))
        self.constraintModeBox.setItemText(2, _translate("DSuper8", "Shadows"))
        self.exposureModeBox.setItemText(0, _translate("DSuper8", "Normal"))
        self.exposureModeBox.setItemText(1, _translate("DSuper8", "Short exposure"))
        self.exposureModeBox.setItemText(2, _translate("DSuper8", "Long exposure"))
        self.meteringModeLabel.setToolTip(_translate("DSuper8", "Sets the auto exposure metering mode for\n"
"the auto exposure algorithm AEC/AGC.\n"
"Camera default: Centre weighted."))
        self.meteringModeBox.setItemText(0, _translate("DSuper8", "Centre weighted"))
        self.meteringModeBox.setItemText(1, _translate("DSuper8", "Spot"))
        self.meteringModeBox.setItemText(2, _translate("DSuper8", "Matrix"))
        self.PostCapGroupBox.setTitle(_translate("DSuper8", "Post-capture operations to be carried out on the client"))
        self.logarithmHist.setText(_translate("DSuper8", "Logaritmic"))
        self.rotationBox.setSuffix(_translate("DSuper8", "º"))
        self.cropBottomBox.setSuffix(_translate("DSuper8", " px"))
        self.cropTopBox.setSuffix(_translate("DSuper8", " px"))
        self.cropLeftBox.setSuffix(_translate("DSuper8", " px"))
        self.cropRightLabel.setText(_translate("DSuper8", "Right"))
        self.cropRightBox.setSuffix(_translate("DSuper8", " px"))
        self.HDRgroupBox.setTitle(_translate("DSuper8", "HDR algorithm"))
        self.PHighSpinBox.setSuffix(_translate("DSuper8", " %"))
        self.PLowSpinBox.setSuffix(_translate("DSuper8", " %"))
        self.toneMapGroupBox.setTitle(_translate("DSuper8", "Tone mapping algorithm"))
        self.DragoBiasLabel.setToolTip(_translate("DSuper8", "Range between 0 and 1.\n"
"Values between 0.7 and 0.9 usually give\n"
"the best results.\n"
"By default 0.85."))
        self.MantiukRadioButton.setText(_translate("DSuper8", "Ma&ntiuk"))
        self.awbBox.setItemText(1, _translate("DSuper8", "Incandescent"))
        self.awbBox.setItemText(2, _translate("DSuper8", "Tungsten"))
        self.awbBox.setItemText(3, _translate("DSuper8", "Fluorescent"))
        self.awbBox.setItemText(4, _translate("DSuper8", "Indoor"))
        self.awbBox.setItemText(5, _translate("DSuper8", "Day light"))
        self.awbBox.setItemText(6, _translate("DSuper8", "Cloudy"))
        self.awbBox.setItemText(7, _translate("DSuper8", "Personal"))
        self.awbBox.setItemText(8, _translate("DSuper8", "Manual"))
